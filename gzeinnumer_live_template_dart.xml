<templateSet group="gzeinnumer_live_template_dart">
  <template name="gdart_bloc_L0_Class" value="import 'package:flutter_bloc/flutter_bloc.dart';&#10;&#10;//EVENT-------------------------------------------------------------------------&#10;abstract class $Examples$Event {}&#10;&#10;class $Examples$EventInit extends $Examples$Event {}&#10;&#10;class $Examples$EventEd extends $Examples$Event {&#10;  final String value;&#10;&#10;  $Examples$EventEd(this.value);&#10;}&#10;&#10;class $Examples$EventSubmit extends $Examples$Event {}&#10;&#10;//STATUS------------------------------------------------------------------------&#10;abstract class $Examples$Status {&#10;  const $Examples$Status();&#10;}&#10;&#10;class $Examples$StatusLoading extends $Examples$Status {&#10;  const $Examples$StatusLoading();&#10;}&#10;&#10;class $Examples$StatusInit extends $Examples$Status {&#10;  const $Examples$StatusInit();&#10;}&#10;&#10;class $Examples$StatusInitDone extends $Examples$Status {&#10;  const $Examples$StatusInitDone();&#10;}&#10;&#10;class $Examples$StatusOnInput extends $Examples$Status {&#10;  const $Examples$StatusOnInput();&#10;}&#10;&#10;class $Examples$StatusInfo extends $Examples$Status {&#10;  final String? _title;&#10;  final String? _msg;&#10;  final int? _type;&#10;&#10;  //type 1 = success-&gt;back&#10;  //type 2 = info-&gt;stay&#10;  //type 3 = info-&gt;back&#10;  //type 4 = confirm&#10;  //type 5 = snackbar&#10;  //type 6 = action&#10;&#10;  String? get title =&gt; _title;&#10;&#10;  String? get msg =&gt; _msg;&#10;&#10;  int? get type =&gt; _type;&#10;&#10;  $Examples$StatusInfo(this._title, this._msg, this._type);&#10;}&#10;&#10;//STATE-------------------------------------------------------------------------&#10;class $Examples$State {&#10;  final String ed;&#10;&#10;  String? get isValidEd =&gt; ed.toString().isNotEmpty ? null : &quot;required&quot;;&#10;&#10;  List&lt;String&gt;? data;&#10;&#10;  final $Examples$Status status;&#10;&#10;  $Examples$State({&#10;    this.ed = &quot;&quot;,&#10;    this.data = const [],&#10;    this.status = const $Examples$StatusInit(),&#10;  });&#10;&#10;  $Examples$State copyWith({&#10;    String? ed,&#10;    List&lt;String&gt;? data,&#10;    $Examples$Status? status,&#10;  }) {&#10;    return $Examples$State(&#10;      ed: ed ?? this.ed,&#10;      data: data ?? this.data,&#10;      status: status ?? this.status,&#10;    );&#10;  }&#10;}&#10;&#10;//BLOC--------------------------------------------------------------------------&#10;class $Examples$Bloc extends Bloc&lt;$Examples$Event, $Examples$State&gt; {&#10;  final $Expample$Repo repo;&#10;&#10;  $Examples$Bloc({&#10;    required this.repo,&#10;  }) : super($Examples$State());&#10;&#10;  @override&#10;  Stream&lt;$Examples$State&gt; mapEventToState($Examples$Event event) async* {&#10;    if (event is $Examples$EventInit) {&#10;      //Dummy&#10;      yield state.copyWith(status: const $Examples$StatusLoading());&#10;      yield state.copyWith(&#10;        status: const $Examples$StatusInitDone(),&#10;        data: [],&#10;      );&#10;      yield state.copyWith(status: $Examples$StatusInfo(MSG_WARNING, &quot;Success&quot;, 2));&#10;      yield state.copyWith(status: const $Examples$StatusOnInput());&#10;&#10;      ////FOR LIST&#10;      // try {&#10;      //   yield state.copyWith(status: const $Examples$StatusLoading());&#10;      //&#10;      //   final res = await repo.get();&#10;      //&#10;      //   yield state.copyWith(status: const $Examples$StatusInitDone());&#10;      //   if (res.status == 1) {&#10;      //     yield state.copyWith(&#10;      //        data: res.data, &#10;      //        status: $Examples$StatusInfo(MSG_WARNING, &quot;Success&quot;, 2),&#10;      //     );&#10;      //   } else {&#10;      //     yield state.copyWith(&#10;      //        data: [],&#10;      //        status: $Examples$StatusInfo(MSG_WARNING, res.message, 2),&#10;      //     );&#10;      //   }&#10;      //   yield state.copyWith(status: const $Examples$StatusOnInput());&#10;      // } on Error catch (e) {&#10;      //   yield state.copyWith(status: $Examples$StatusInfo(MSG_WARNING, e.toString(), 2));&#10;      //   yield state.copyWith(status: const $Examples$StatusOnInput());&#10;      // }&#10;&#10;      ////FOR DETAIL&#10;      // try {&#10;      //   yield state.copyWith(status: const $Examples$StatusLoading());&#10;      //&#10;      //   final res = await repo.get();&#10;      //&#10;      //   yield state.copyWith(status: const $Examples$StatusInitDone());&#10;      //   if (res.status == 1) {&#10;      //     yield state.copyWith(&#10;      //        data: res.data,&#10;      //        status: $Examples$StatusInfo(MSG_WARNING, &quot;Success&quot;, 2),&#10;      //     );&#10;      //   } else {&#10;      //     yield state.copyWith(&#10;      //        data: [],&#10;      //        status: $Examples$StatusInfo(MSG_WARNING, res.message, 2),&#10;      //      );&#10;      //   }&#10;      //   yield state.copyWith(status: const $Examples$StatusOnInput());&#10;      // } on Error catch (e) {&#10;      //   yield state.copyWith(status: $Examples$StatusInfo(MSG_WARNING, e.toString(), 2));&#10;      //   yield state.copyWith(status: const $Examples$StatusOnInput());&#10;      // }&#10;    } else if (event is $Examples$EventEd) {&#10;      yield state.copyWith(ed: event.value);&#10;    } else if (event is $Examples$EventSubmit) {&#10;      //Dummy&#10;      yield state.copyWith(status: const $Examples$StatusLoading());&#10;      yield state.copyWith(status: const $Examples$StatusInitDone());&#10;      yield state.copyWith(&#10;        data: [],&#10;        status: $Examples$StatusInfo(MSG_WARNING, &quot;Success&quot;, 2),&#10;      );&#10;      yield state.copyWith(status: const $Examples$StatusOnInput());&#10;&#10;      ////FOR FORM&#10;      // try {&#10;      //   yield state.copyWith(status: const $Examples$StatusLoading());&#10;      //&#10;      //   final res = await repo.get();&#10;      //&#10;      //   yield state.copyWith(status: const $Examples$StatusInitDone());&#10;      //   if (res.status == 1) {&#10;      //     yield state.copyWith(&#10;      //        data: res.data,&#10;      //        status: $Examples$StatusInfo(MSG_WARNING, &quot;Success&quot;, 6),&#10;      //     );&#10;      //   } else {&#10;      //     yield state.copyWith(&#10;      //        data: [],&#10;      //        status: $Examples$StatusInfo(MSG_WARNING, res.message, 2),&#10;      //     );&#10;      //   }&#10;      //   yield state.copyWith(status: const $Examples$StatusOnInput());&#10;      // } on Error catch (e) {&#10;      //   yield state.copyWith(status: $Examples$StatusInfo(MSG_WARNING, saveMessage(e.toString()), 2));&#10;      //   yield state.copyWith(status: const $Examples$StatusOnInput());&#10;      // }&#10;    }&#10;  }&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="Examples" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Expample" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="gdart_bloc_L1_MultiRepositoryProvider_MultiBlocProvider" value="//L1&#10;body: MultiRepositoryProvider(&#10;  providers: [&#10;    RepositoryProvider(create: (context) =&gt; $REPO_NAME$()),&#10;  ],&#10;  child: MultiBlocProvider(&#10;    providers: [&#10;      BlocProvider&lt;$BLOC_NAME$&gt;(&#10;        create: (context) =&gt; $BLOC_NAME$(&#10;          repo: context.read&lt;$REPO_NAME$&gt;(),&#10;        )..add($BLOC_NAME$EventInit()),&#10;      )&#10;    ],&#10;    child: _body(),&#10;  ),&#10;)," description="" toReformat="false" toShortenFQNames="true">
    <variable name="BLOC_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="REPO_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gdart_bloc_L2_BlocListener" value="//L2&#10;Widget _body() {&#10;  return BlocListener&lt;$BLOC_NAME$Bloc, $BLOC_NAME$State&gt;(&#10;    listener: (context, state) {&#10;      final status = state.status;&#10;      if (status is $BLOC_NAME$StatusInitDone) {&#10;        final c = state.status as $BLOC_NAME$StatusInitDone;&#10;      } else if (status is $BLOC_NAME$StatusInfo) {&#10;          final c = state.status as $BLOC_NAME$StatusInfo;&#10;          String TITLE = c.title.toString();&#10;          String MSG = c.msg.toString();&#10;          int TYPE = c.type!;&#10;          toDialogV2(context, TITLE, MSG, TYPE, null);&#10;      }&#10;      &#10;    },&#10;    child: _content(),&#10;  );&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="BLOC_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gdart_bloc_L3_BlocBuilder" value="//L3&#10;Widget _content() {&#10;  return BlocBuilder&lt;$BLOC_NAME$Bloc, $BLOC_NAME$State&gt;(&#10;    builder: (context, state) {&#10;      if (state.status is $BLOC_NAME$StatusLoading) {&#10;        return const LoadingV1();&#10;      }&#10;      if (state.data == null) {&#10;        return const NoData();&#10;      }&#10;      return _sections(context, state);&#10;    },&#10;  );&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="BLOC_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gdart_snackbar" value="ScaffoldMessenger.of(context).showSnackBar(SnackBar(&#10;  content: Text(&quot;Hay&quot;),&#10;));" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gdart_image_file" value="Image.file(File(path))" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gdart_image_url" value="Image.network(url)" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gdart_image_assets" value="Image.asset('assets/imgs/file.png')" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gdart_toDialog" value="void toDialog(BuildContext context, String TITLE, String MSG, int TYPE) {&#10;  //type 1 = success-&gt;back&#10;  //type 2 = info-&gt;stay&#10;  //type 3 = info-&gt;back&#10;  //type 4 = confirm&#10;  //type 5 = snackbar&#10;  if (TITLE.isNotEmpty &amp;&amp; MSG.isNotEmpty) {&#10;    if (TYPE == 1) {&#10;      showInfoDialog(&#10;        context,&#10;        TITLE,&#10;        MSG,&#10;        &quot;OK&quot;,&#10;        () {&#10;          Navigator.pop(context);&#10;          Navigator.pop(context, true);&#10;        },&#10;        MainAxisAlignment.center,&#10;      );&#10;    } else if (TYPE == 2) {&#10;      showInfoDialog(&#10;        context,&#10;        TITLE,&#10;        MSG,&#10;        &quot;OK&quot;,&#10;        () {&#10;          Navigator.pop(context);&#10;        },&#10;        MainAxisAlignment.center,&#10;      );&#10;    } else if (TYPE == 3) {&#10;    } else if (TYPE == 4) {&#10;    } else {}&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gdart_keyboard_hide" value="FocusManager.instance.primaryFocus?.unfocus();" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gdart_bloc_LC_L2_L3" value="//L2&#10;Widget _body() {&#10;  return BlocListener&lt;$BLOC_NAME$Bloc, $BLOC_NAME$State&gt;(&#10;    listener: (context, state) {&#10;      final status = state.status;&#10;      if (status is $BLOC_NAME$StatusInitDone) {&#10;        final c = state.status as $BLOC_NAME$StatusInitDone;&#10;      } else if (status is $BLOC_NAME$StatusInfo) {&#10;          final c = state.status as $BLOC_NAME$StatusInfo;&#10;          String TITLE = c.title.toString();&#10;          String MSG = c.msg.toString();&#10;          int TYPE = c.type!;&#10;          toDialogV2(context, TITLE, MSG, TYPE, null);&#10;      }&#10;      &#10;    },&#10;    child: _content(),&#10;  );&#10;}&#10;&#10;//L3&#10;Widget _content() {&#10;  return BlocBuilder&lt;$BLOC_NAME$Bloc, $BLOC_NAME$State&gt;(&#10;    builder: (context, state) {&#10;      if (state.status is $BLOC_NAME$StatusLoading) {&#10;        return const LoadingV1();&#10;      }&#10;      if (state.data == null) {&#10;        return const NoData();&#10;      }&#10;      return _sections(context, state);&#10;    },&#10;  );&#10;}&#10;  Widget _sections(BuildContext context, $BLOC_NAME$State state) {&#10;    return Builder(builder: (context) {&#10;      return SingleChildScrollView(&#10;        child: ContainerParentStroke(&#10;          child: Column(&#10;            children: [&#10;              _section1(),&#10;            ],&#10;          ),&#10;        ),&#10;      );&#10;    });&#10;  }" description="" toReformat="false" toShortenFQNames="true">
    <variable name="BLOC_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gdart_bloc_L4_options_list" value="  Widget _sectionsList(BuildContext context, $BLOC_NAME$State state) {&#10;    return ContainerParentList(&#10;      child: Column(&#10;        children: [&#10;          // Text('${state.data!.length}'),&#10;          Expanded(&#10;            child: state.data!.isEmpty&#10;                ? const NoData()&#10;                : ListView.builder(&#10;                    itemBuilder: (context, index) {&#10;                      return Container(child: Text('${state.data![index].toString()}'));&#10;                    },&#10;                    itemCount: state.data!.length,&#10;                  ),&#10;          ),&#10;        ],&#10;      ),&#10;    );&#10;  }" description="" toReformat="false" toShortenFQNames="true">
    <variable name="BLOC_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gdart_bloc_L0_View" value="import 'package:flutter/material.dart';&#10;&#10;class $UsersList$View extends StatelessWidget {&#10;  static const String TAG = &quot;$UsersList$View&quot;;&#10;&#10;  const $UsersList$View({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: const Text(&quot;$UsersList$&quot;),&#10;      ),&#10;      body: _body(),&#10;    );&#10;  }&#10;&#10;  Widget _body() {&#10;    return Builder(&#10;      builder: (context) {&#10;        double width = MediaQuery.of(context).size.width;&#10;        double height = MediaQuery.of(context).size.height;&#10;        return Container(&#10;          height: double.infinity,&#10;          color: Colors.red.withOpacity(0.5),&#10;          child: SingleChildScrollView(&#10;            child: Column(&#10;              children: [&#10;                &#10;              ],&#10;            ),&#10;          ),&#10;        );&#10;      }&#10;    );&#10;  }&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="UsersList" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="test" value="import 'package:flutter_bloc/flutter_bloc.dart';&#10;&#10;//EVENT-------------------------------------------------------------------------&#10;abstract class $Examples$Event {}&#10;&#10;class $Examples$EventInit extends $Examples$Event {}&#10;&#10;class $Examples$EventEd extends $Examples$Event {&#10;  final String value;&#10;&#10;  $Examples$EventEd(this.value);&#10;}&#10;&#10;class $Examples$EventSubmit extends $Examples$Event {}&#10;&#10;//STATUS------------------------------------------------------------------------&#10;abstract class $Examples$Status {&#10;  const $Examples$Status();&#10;}&#10;&#10;class $Examples$StatusLoading extends $Examples$Status {&#10;  const $Examples$StatusLoading();&#10;}&#10;&#10;class $Examples$StatusInit extends $Examples$Status {&#10;  const $Examples$StatusInit();&#10;}&#10;&#10;class $Examples$StatusInitDone extends $Examples$Status {&#10;  const $Examples$StatusInitDone();&#10;}&#10;&#10;class $Examples$StatusOnInput extends $Examples$Status {&#10;  const $Examples$StatusOnInput();&#10;}&#10;&#10;class $Examples$StatusInfo extends $Examples$Status {&#10;  final String? _title;&#10;  final String? _msg;&#10;  final int? _type;&#10;&#10;  //type 1 = success-&gt;back&#10;  //type 2 = info-&gt;stay&#10;  //type 3 = info-&gt;back&#10;  //type 4 = confirm&#10;  //type 5 = snackbar&#10;  //type 6 = action&#10;&#10;  String? get title =&gt; _title;&#10;&#10;  String? get msg =&gt; _msg;&#10;&#10;  int? get type =&gt; _type;&#10;&#10;  $Examples$StatusInfo(this._title, this._msg, this._type);&#10;}&#10;&#10;//STATE-------------------------------------------------------------------------&#10;class $Examples$State {&#10;  final String ed;&#10;&#10;  String? get isValidEd =&gt; ed.toString().isNotEmpty ? null : &quot;required&quot;;&#10;&#10;  List&lt;String&gt;? data;&#10;&#10;  final $Examples$Status status;&#10;&#10;  $Examples$State({&#10;    this.ed = &quot;&quot;,&#10;    this.data = const [],&#10;    this.status = const $Examples$StatusInit(),&#10;  });&#10;&#10;  $Examples$State copyWith({&#10;    String? ed,&#10;    List&lt;String&gt;? data,&#10;    $Examples$Status? status,&#10;  }) {&#10;    return $Examples$State(&#10;      ed: ed ?? this.ed,&#10;      data: data ?? this.data,&#10;      status: status ?? this.status,&#10;    );&#10;  }&#10;}&#10;&#10;//BLOC--------------------------------------------------------------------------&#10;class $Examples$Bloc extends Bloc&lt;$Examples$Event, $Examples$State&gt; {&#10;  final $Expample$Repo repo;&#10;&#10;  $Examples$Bloc({&#10;    required this.repo,&#10;  }) : super($Examples$State());&#10;&#10;  @override&#10;  Stream&lt;$Examples$State&gt; mapEventToState($Examples$Event event) async* {&#10;    if (event is $Examples$EventInit) {&#10;      //Dummy&#10;      yield state.copyWith(status: const $Examples$StatusLoading());&#10;      yield state.copyWith(&#10;        status: const $Examples$StatusInitDone(),&#10;        data: [],&#10;      );&#10;      yield state.copyWith(status: $Examples$StatusInfo(MSG_WARNING, &quot;Success&quot;, 2));&#10;      yield state.copyWith(status: const $Examples$StatusOnInput());&#10;&#10;      ////FOR LIST&#10;      // try {&#10;      //   yield state.copyWith(status: const $Examples$StatusLoading());&#10;      //&#10;      //   final res = await repo.get();&#10;      //&#10;      //   yield state.copyWith(status: const $Examples$StatusInitDone());&#10;      //   if (res.status == 1) {&#10;      //     yield state.copyWith(&#10;      //        data: res.data, &#10;      //        status: $Examples$StatusInfo(MSG_WARNING, &quot;Success&quot;, 2),&#10;      //     );&#10;      //   } else {&#10;      //     yield state.copyWith(&#10;      //        data: [],&#10;      //        status: $Examples$StatusInfo(MSG_WARNING, res.message, 2),&#10;      //     );&#10;      //   }&#10;      //   yield state.copyWith(status: const $Examples$StatusOnInput());&#10;      // } on Error catch (e) {&#10;      //   yield state.copyWith(status: $Examples$StatusInfo(MSG_WARNING, e.toString(), 2));&#10;      //   yield state.copyWith(status: const $Examples$StatusOnInput());&#10;      // }&#10;&#10;      ////FOR DETAIL&#10;      // try {&#10;      //   yield state.copyWith(status: const $Examples$StatusLoading());&#10;      //&#10;      //   final res = await repo.get();&#10;      //&#10;      //   yield state.copyWith(status: const $Examples$StatusInitDone());&#10;      //   if (res.status == 1) {&#10;      //     yield state.copyWith(&#10;      //        data: res.data,&#10;      //        status: $Examples$StatusInfo(MSG_WARNING, &quot;Success&quot;, 2),&#10;      //     );&#10;      //   } else {&#10;      //     yield state.copyWith(&#10;      //        data: [],&#10;      //        status: $Examples$StatusInfo(MSG_WARNING, res.message, 2),&#10;      //      );&#10;      //   }&#10;      //   yield state.copyWith(status: const $Examples$StatusOnInput());&#10;      // } on Error catch (e) {&#10;      //   yield state.copyWith(status: $Examples$StatusInfo(MSG_WARNING, e.toString(), 2));&#10;      //   yield state.copyWith(status: const $Examples$StatusOnInput());&#10;      // }&#10;    } else if (event is $Examples$EventEd) {&#10;      yield state.copyWith(ed: event.value);&#10;    } else if (event is $Examples$EventSubmit) {&#10;      //Dummy&#10;      yield state.copyWith(status: const $Examples$StatusLoading());&#10;      yield state.copyWith(status: const $Examples$StatusInitDone());&#10;      yield state.copyWith(&#10;        data: [],&#10;        status: $Examples$StatusInfo(MSG_WARNING, &quot;Success&quot;, 2),&#10;      );&#10;      yield state.copyWith(status: const $Examples$StatusOnInput());&#10;&#10;      ////FOR FORM&#10;      // try {&#10;      //   yield state.copyWith(status: const $Examples$StatusLoading());&#10;      //&#10;      //   final res = await repo.get();&#10;      //&#10;      //   yield state.copyWith(status: const $Examples$StatusInitDone());&#10;      //   if (res.status == 1) {&#10;      //     yield state.copyWith(&#10;      //        data: res.data,&#10;      //        status: $Examples$StatusInfo(MSG_WARNING, &quot;Success&quot;, 6),&#10;      //     );&#10;      //   } else {&#10;      //     yield state.copyWith(&#10;      //        data: [],&#10;      //        status: $Examples$StatusInfo(MSG_WARNING, res.message, 2),&#10;      //     );&#10;      //   }&#10;      //   yield state.copyWith(status: const $Examples$StatusOnInput());&#10;      // } on Error catch (e) {&#10;      //   yield state.copyWith(status: $Examples$StatusInfo(MSG_WARNING, saveMessage(e.toString()), 2));&#10;      //   yield state.copyWith(status: const $Examples$StatusOnInput());&#10;      // }&#10;    }&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="Examples" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Expample" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="gdart_network_list" value="Future&lt;BaseResponseList&lt;$IzinSummaryItemResponse$&gt;&gt; getList$Izin$() async {&#10;  try {&#10;    await setHeader();&#10;    var url = &quot;$baseUrl/url&quot;;&#10;    Response json = await dio.get(&#10;      url,&#10;    );&#10;    return BaseResponseList.fromJson(json.data, (data) {&#10;      List&lt;$IzinSummaryItemResponse$&gt; list = data.map((e) =&gt; $IzinSummaryItemResponse$.fromJson(e)).toList();&#10;      return list;&#10;    });&#10;  } catch (e) {&#10;    return BaseResponseList(status: 0, title: &quot;Perhatian&quot;, message: saveMessage(e.toString()), info: null, data: null);&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="Izin" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="IzinSummaryItemResponse" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gdart_network_object" value="Future&lt;BaseResponseObject&lt;$IzinDateResponse$&gt;&gt; get$KalenderIzin$() async {&#10;  try {&#10;    await setHeader();&#10;    Response json = await dio.get(&#10;      &quot;$baseUrl/url&quot;,&#10;    );&#10;    return BaseResponseObject.fromJson(json.data, (data) {&#10;      return $IzinDateResponse$.fromJson(data);&#10;    });&#10;  } catch (e) {&#10;    // throw e;&#10;    return BaseResponseObject(status: 0, title: &quot;Perhatian&quot;, message: saveMessage(e.toString()), info: null, data: null);&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="IzinDateResponse" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="KalenderIzin" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gdart_network_msg" value="Future&lt;BaseResponseMsg&gt; set$DeleteIzin$(String body) async {&#10;  try {&#10;    await setHeader();&#10;    Response json = await dio.get(&#10;      &quot;$baseUrl/url&quot;,&#10;    );&#10;    return BaseResponseMsg.fromJson(json.data);&#10;  } catch (e) {&#10;    // throw e;&#10;    return BaseResponseMsg(status: 0, title: &quot;Perhatian&quot;, message: saveMessage(e.toString()));&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="DeleteIzin" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
</templateSet>