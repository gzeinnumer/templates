<templateSet group="gzeinnumer_live_template">
  <template name="gzn_tv" value="&lt;TextView&#10;    android:id=&quot;@+id/tv_$id$&quot;&#10;    style=&quot;@style/MyTextContent&quot;&#10;    android:text=&quot;MyTextContent&quot; /&gt;" description="simple text view" toReformat="true" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_parent_view" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/parent&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;include layout=&quot;@layout/widget_bg&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;/&gt;&#10;&#10;    &lt;androidx.core.widget.NestedScrollView&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        android:fillViewport=&quot;true&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;com.google.android.material.appbar.AppBarLayout&#10;                style=&quot;@style/MyAppbarLayout&quot;&#10;                android:background=&quot;@color/white&quot;&gt;&#10;&#10;                &lt;com.google.android.material.appbar.MaterialToolbar style=&quot;@style/MyMaterialToolbar&quot;&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:gravity=&quot;center&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;                        &lt;ImageButton&#10;                            android:id=&quot;@+id/btn_back&quot;&#10;                            style=&quot;@style/MyCostumToolbarImage&quot;&#10;                            android:src=&quot;@drawable/mygzn_keyboard_arrow_left&quot;&#10;                            android:tag=&quot;CostumToolbarImage&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tv_toolbar&quot;&#10;                            style=&quot;@style/MyCostumToolbarTitle&quot;&#10;                            android:text=&quot;MyCostumToolbarTitle&quot; /&gt;&#10;&#10;                        &lt;ImageButton&#10;                            android:id=&quot;@+id/btn_popup&quot;&#10;                            style=&quot;@style/MyOptionMenu&quot;&#10;                            android:src=&quot;@drawable/mygzn_more_vert&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/com.google.android.material.appbar.MaterialToolbar&gt;&#10;            &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;            &lt;View style=&quot;@style/MyDivider.Toolbar&quot; /&gt;&#10;&#10;            &lt;LinearLayout style=&quot;@style/MyParentType&quot;&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/androidx.core.widget.NestedScrollView&gt;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" description="Simple Xml View" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyTopHeader" value="&lt;TextView&#10;    android:id=&quot;@+id/tv_$id$&quot;&#10;    style=&quot;@style/MyTopHeader&quot;&#10;    android:text=&quot;MyTopHeader&quot; /&gt;" description="MyTopHeader" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyTextHeader" value="&lt;TextView&#10;    android:id=&quot;@+id/tv_$id$&quot;&#10;    style=&quot;@style/MyTextHeader&quot;&#10;    android:text=&quot;MyTextHeader&quot; /&gt;" description="MyTextHeader" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyTextInputLayoutOutlinedBox" value="&lt;com.google.android.material.textfield.TextInputLayout&#10;    android:id=&quot;@+id/ed_$id$_p&quot;&#10;    style=&quot;@style/MyTextInputLayoutOutlinedBox&quot;&#10;    android:hint=&quot;$hint$&quot;&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputEditText&#10;        android:id=&quot;@+id/ed_$id$&quot;&#10;        style=&quot;@style/MyTextInputEditText&quot; /&gt;&#10;&#10;&lt;/com.google.android.material.textfield.TextInputLayout&gt;" description="MyTextInputLayoutOutlinedBox" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="hint" expression="capitalize(id)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyTextInputLayoutOutlinedBoxNext" value="&lt;com.google.android.material.textfield.TextInputLayout&#10;    android:id=&quot;@+id/ed_$id$_p&quot;&#10;    style=&quot;@style/MyTextInputLayoutOutlinedBoxNext&quot;&#10;    android:hint=&quot;$hint$&quot;&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputEditText&#10;        android:id=&quot;@+id/ed_$id$&quot;&#10;        style=&quot;@style/MyTextInputEditText&quot; /&gt;&#10;&#10;&lt;/com.google.android.material.textfield.TextInputLayout&gt;" description="MyTextInputLayoutOutlinedBoxNext" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="hint" expression="capitalize(id)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyTextInputLayoutFilledBox" value="&lt;com.google.android.material.textfield.TextInputLayout&#10;    android:id=&quot;@+id/ed_$id$_p&quot;&#10;    style=&quot;@style/MyTextInputLayoutFilledBox&quot;&#10;    android:hint=&quot;$hint$&quot;&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputEditText&#10;        android:id=&quot;@+id/ed_$id$&quot;&#10;        style=&quot;@style/MyTextInputEditText&quot; /&gt;&#10;&#10;&lt;/com.google.android.material.textfield.TextInputLayout&gt;" description="MyTextInputLayoutFilledBox" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="hint" expression="capitalize(id)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyButtonOutlined" value="&lt;Button&#10;    android:id=&quot;@+id/btn_$id$&quot;&#10;    style=&quot;@style/MyButtonOutlined&quot;&#10;    android:text=&quot;$hint$&quot; /&gt;" description="MyButtonOutlined" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="hint" expression="capitalize(id)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyButtonText" value="&lt;Button&#10;    android:id=&quot;@+id/btn_$id$&quot;&#10;    style=&quot;@style/MyButtonText&quot;&#10;    android:text=&quot;$hint$&quot; /&gt;" description="MyButtonText" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="hint" expression="capitalize(id)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyButtonIcon" value="&lt;Button&#10;    android:id=&quot;@+id/btn_$id$&quot;&#10;    style=&quot;@style/MyButtonIcon&quot;&#10;    android:text=&quot;$hint$&quot;&#10;    app:icon=&quot;@drawable/mygzn_add&quot; /&gt;" description="MyButtonIcon" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="hint" expression="capitalize(id)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyAutoCompleteTextViewFilledBox" value="&lt;com.google.android.material.textfield.TextInputLayout&#10;    android:id=&quot;@+id/ed_$id$_p&quot;&#10;    style=&quot;@style/MyAutoCompleteTextViewFilledBox&quot;&#10;    android:hint=&quot;$hint$&quot;&gt;&#10;&#10;    &lt;AutoCompleteTextView&#10;        android:id=&quot;@+id/ed_$id$&quot;&#10;        style=&quot;@style/MyAutoCompleteTextView&quot; /&gt;&#10;&#10;&lt;/com.google.android.material.textfield.TextInputLayout&gt;" description="MyAutoCompleteTextViewFilledBox" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="hint" expression="capitalize(id)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyAutoCompleteTextViewOutlineBox" value="&lt;com.google.android.material.textfield.TextInputLayout&#10;    android:id=&quot;@+id/ed_$id$_p&quot;&#10;    style=&quot;@style/MyAutoCompleteTextViewOutlineBox&quot;&#10;    android:hint=&quot;$hint$&quot;&gt;&#10;&#10;    &lt;AutoCompleteTextView&#10;        android:id=&quot;@+id/ed_$id$&quot;&#10;        style=&quot;@style/MyAutoCompleteTextView&quot; /&gt;&#10;&#10;&lt;/com.google.android.material.textfield.TextInputLayout&gt;" description="MyAutoCompleteTextViewOutlineBox" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="hint" expression="capitalize(id)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyImageFotoPreview" value="&lt;ImageView&#10;    android:id=&quot;@+id/img_$id$&quot; &#10;    style=&quot;@style/MyImageFotoPreview&quot; /&gt;" description="MyImageFotoPreview" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyDivider" value="&lt;View style=&quot;@style/MyDivider&quot; /&gt;" description="MyDivider" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyDivider_H" value="&lt;View style=&quot;@style/MyDivider.Horizontal&quot;/&gt;" description="Top tp Bottom - MyDivider.Horizontal" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyDivider_V" value="&lt;View style=&quot;@style/MyDivider.Vertical&quot;/&gt;" description="Left To Right MyDivider.Vertical" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyRadioGroup" value="&lt;RadioGroup&#10;    android:id=&quot;@+id/rg_$id$&quot;&#10;    style=&quot;@style/MyRadioGroup&quot;&#10;    android:checkedButton=&quot;@+id/rb_first&quot;&gt;&#10;&#10;    &lt;RadioButton&#10;        android:id=&quot;@+id/rb_first&quot;&#10;        style=&quot;@style/MyRadioButton&quot;&#10;        android:text=&quot;MyRadioButton&quot; /&gt;&#10;&lt;/RadioGroup&gt;" description="MyRadioGroup" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyEditText" value="&lt;EditText&#10;    android:id=&quot;@+id/ed_$id$&quot;&#10;    style=&quot;@style/MyEditText&quot;&#10;    android:hint=&quot;MyEditText&quot; /&gt;" description="MyEditText" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_MyCheckBox" value="&lt;com.google.android.material.checkbox.MaterialCheckBox&#10;    android:id=&quot;@+id/cb_$id$&quot;&#10;    style=&quot;@style/MyCheckBox&quot;&#10;    android:text=&quot;MyCheckBox&quot; /&gt;" description="MyCheckBox" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_var_live_data" value="private final MutableLiveData&lt;$OBJECT$&gt; $VAR_NAME$ = new MutableLiveData&lt;&gt;();&#10;&#10;public void set$CAP_VAR_NAME$($OBJECT$ value) {&#10;    $VAR_NAME$.setValue(value);&#10;}&#10;&#10;public LiveData&lt;$OBJECT$&gt; get$CAP_VAR_NAME$() {&#10;    return $VAR_NAME$;&#10;}" shortcut="TAB" description="Simple MutableLiveData" toReformat="false" toShortenFQNames="true">
    <variable name="OBJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_NAME" expression="camelCase(OBJECT)" defaultValue="" alwaysStopAt="false" />
    <variable name="CAP_VAR_NAME" expression="capitalize(camelCase(VAR_NAME))" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_click" value="binding.$VIEW$.setOnClickListener(view -&gt; {&#10;    &#10;});" description="set on click" toReformat="false" toShortenFQNames="true">
    <variable name="VIEW" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="use" value="String log = ConstantZein.USE;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_start_ins_viewmodel" value="private $object$ vm;&#10;vm = new ViewModelProvider(this).get($object$.class);" description="simple view Model Instanse" toReformat="false" toShortenFQNames="true">
    <variable name="object" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_conf_item" value="android:layout_marginStart=&quot;@dimen/def_margin&quot;&#10;android:layout_marginTop=&quot;@dimen/def_margin_half&quot;&#10;android:layout_marginEnd=&quot;@dimen/def_margin&quot;&#10;android:layout_marginBottom=&quot;@dimen/def_margin_half&quot;" description="item best Conf" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML_ATTRIBUTE" value="true" />
    </context>
  </template>
  <template name="gzn_conf_rv" value="android:layout_marginTop=&quot;@dimen/def_margin_half&quot;&#10;android:layout_marginBottom=&quot;@dimen/def_margin_half&quot;    " description="space for LV/RV" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML_ATTRIBUTE" value="true" />
    </context>
  </template>
  <template name="gzn_start_binding_ac" value="private $OBJECT$ binding;&#10;&#10;binding = $OBJECT$.inflate(getLayoutInflater());&#10;setContentView(binding.getRoot());&#10;&#10;initView();&#10;initTextWatcher();&#10;initObserver();&#10;initOnClick();" description="binding activity" toReformat="false" toShortenFQNames="true">
    <variable name="OBJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="gzn_logd" value="GblFunction.myLogD(getClass().getSimpleName(), &quot;$METHOD_NAME$: &quot;+$content$);&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="METHOD_NAME" expression="methodName()" defaultValue="" alwaysStopAt="false" />
    <variable name="content" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="gzn_start_binding_fun" value="private void initView() {&#10;&#10;}&#10;&#10;private void initTextWatcher() {&#10;&#10;}&#10;&#10;private void initObserver() {&#10;&#10;}&#10;&#10;private void initOnClick() {&#10;    binding.btnBack.setOnClickListener(view -&gt; {&#10;        onBackPressed();&#10;    });&#10;    debugLocationActivity(binding.$debug$, getClass().getSimpleName());&#10;}" description="basic init function" toReformat="false" toShortenFQNames="true">
    <variable name="debug" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_init_fr_oncreate" value="private $OBJECT_BIND$ binding;&#10;private $OBJECT_VM$ vm;&#10;&#10;@Override&#10;public View onCreateView(LayoutInflater inflater, ViewGroup container,&#10;        Bundle savedInstanceState) {&#10;    binding = $OBJECT_BIND$.inflate(inflater, container, false);&#10;    vm = new ViewModelProvider(this).get($OBJECT_VM$.class);&#10;    return binding.getRoot();&#10;}&#10;&#10;@Override&#10;public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;    super.onViewCreated(view, savedInstanceState);&#10;&#10;    initView();&#10;    initTextWatcher();&#10;    initObserver();&#10;    initOnClick();&#10;}&#10;&#10;private void initView() {&#10;&#10;}&#10;&#10;private void initTextWatcher() {&#10;&#10;}&#10;&#10;private void initObserver() {&#10;&#10;}&#10;&#10;public void initOnClick() {&#10;&#10;}" description="simple fr init" toReformat="false" toShortenFQNames="true">
    <variable name="OBJECT_VM" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="OBJECT_BIND" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_init_ac_oncreate" value="private $OBJECT$ binding;&#10;private $OBJECT_VM$ vm;&#10;&#10;@Override&#10;protected void onCreate(Bundle savedInstanceState) {&#10;    super.onCreate(savedInstanceState);&#10;    binding = $OBJECT$.inflate(getLayoutInflater());&#10;    setContentView(binding.getRoot());&#10;    &#10;    vm = new ViewModelProvider(this).get($OBJECT_VM$.class);&#10;    &#10;    initView();&#10;    initTextWatcher();&#10;    initObserver();&#10;    initOnClick();&#10;}&#10;&#10;private void initView() {&#10;    &#10;}&#10;&#10;private void initTextWatcher() {&#10;&#10;}&#10;&#10;private void initObserver() {&#10;&#10;}&#10;&#10;private void initOnClick() {&#10;    debugLocationActivity(binding.tvToolbar, getClass().getSimpleName());&#10;    binding.btnBack.setOnClickListener(view -&gt; {&#10;        onBackPressed();&#10;    });&#10;}" description="simple ini oncreate" toReformat="false" toShortenFQNames="true">
    <variable name="OBJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="OBJECT_VM" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_MyButtonContained" value="&lt;Button&#10;    android:id=&quot;@+id/btn_$id$&quot;&#10;    style=&quot;@style/MyButtonContained&quot;&#10;    android:text=&quot;$hint$&quot; /&gt;" description="MyButtonContained" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="hint" expression="capitalize(id)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_rv" value="&lt;androidx.recyclerview.widget.RecyclerView&#10;    android:id=&quot;@+id/rv&quot;&#10;    android:overScrollMode=&quot;never&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:listitem=&quot;@layout/item_$layout$&quot; /&gt;" description="simple RV" toReformat="false" toShortenFQNames="true">
    <variable name="layout" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_rv_item" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;    &lt;androidx.cardview.widget.CardView&#10;        android:id=&quot;@+id/cv&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginLeft=&quot;@dimen/def_margin&quot;&#10;        android:layout_marginTop=&quot;@dimen/def_margin_half&quot;&#10;        android:layout_marginRight=&quot;@dimen/def_margin&quot;&#10;        android:layout_marginBottom=&quot;@dimen/def_margin_half&quot;&#10;        app:cardCornerRadius=&quot;@dimen/radius&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_margin=&quot;@dimen/def_margin&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/androidx.cardview.widget.CardView&gt;&#10;&lt;/LinearLayout&gt;" description="best item config" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_rv_init_adapter" value="private void initRV$adapter$() {&#10;    DummyAdapterV2 adapter = new DummyAdapterV2(R.layout.item_$layout$, position -&gt; {&#10;&#10;    });&#10;&#10;    binding.rv.setAdapter(adapter);&#10;    binding.rv.hasFixedSize();&#10;    binding.rv.setLayoutManager(new LinearLayoutManager(getApplicationContext()));&#10;}" description="implement Dummy Adapter" toReformat="false" toShortenFQNames="true">
    <variable name="layout" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="adapter" expression="capitalize(layout)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_tv_content" value="&lt;LinearLayout&#10;    android:layout_width=&quot;wrap_content&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_marginTop=&quot;@dimen/space&quot;&#10;    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;    &lt;TextView&#10;        style=&quot;@style/MyTextContent.Small.Grey.Light&quot;&#10;        android:text=&quot;$hint$&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tv_$id$&quot;&#10;        style=&quot;@style/MyTextContent&quot;&#10;        android:layout_marginTop=&quot;5dp&quot;&#10;        android:text=&quot;$hint$&quot; /&gt;&#10;&lt;/LinearLayout&gt;" description="sub and detail content" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="hint" expression="capitalize(underscoresToSpaces(underscoresToCamelCase(id)))" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_bg_full" value="&lt;include&#10;    layout=&quot;@layout/widget_bg&quot;&#10;    android:layout_width=&quot;0dp&quot;&#10;    android:layout_height=&quot;0dp&quot;&#10;    app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;    app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;    app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;    app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;" description="bg with constrain" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="logdz" value="GblFunction.myLogD(TAG, &quot;$METHOD_NAME$: $content$&quot;);&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="METHOD_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="content" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="gzn_empty_content" value="&lt;View style=&quot;@style/EmptyContent&quot; /&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_adapter" value="import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Filter;&#10;import android.widget.Filterable;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.gzeinnumer.myapplication.databinding.ItemRvBinding;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Collections;&#10;import java.util.Comparator;&#10;import java.util.List;&#10;&#10;public class $NAME$ extends RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt; implements Filterable {&#10;&#10;    private List&lt;$OBJECT$&gt; list;&#10;    private List&lt;$OBJECT$&gt; listFilter;&#10;    private OnItemClickListener onItemClickListener;&#10;&#10;    private int emptyLayout = -1;&#10;&#10;    public $NAME$() {&#10;        this.list = new ArrayList&lt;&gt;();&#10;        this.listFilter = new ArrayList&lt;&gt;(list);&#10;    }&#10;&#10;    public void setOnItemClickListener(OnItemClickListener onItemClickListener) {&#10;        this.onItemClickListener = onItemClickListener;&#10;    }&#10;&#10;    public void setList(List&lt;$OBJECT$&gt; list) {&#10;        this.list = list;&#10;        this.listFilter = new ArrayList&lt;&gt;(list);&#10;        notifyDataSetChanged();&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        if (list.size() == 0) {&#10;            return new ViewHolderEmpty(LayoutInflater.from(parent.getContext()).inflate(emptyLayout == -1 ? R.layout.empty_item : emptyLayout, parent, false));&#10;        } else {&#10;            return new MyHolder($OBJECT_BINDING$.inflate(LayoutInflater.from(parent.getContext()), parent, false));&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {&#10;        //holder.itemView.setAnimation(AnimationUtils.loadAnimation(holder.itemView.getContext(), GblVariabel.anim));&#10;        if (list.size() &gt; 0) {&#10;            ((MyHolder)holder).bind(position, list.get(position), onItemClickListener);&#10;        }&#10;    }&#10;&#10;    public static class MyHolder extends RecyclerView.ViewHolder {&#10;        public $OBJECT_BINDING$ binding;&#10;&#10;        public MyHolder(@NonNull $OBJECT_BINDING$ itemView) {&#10;            super(itemView.getRoot());&#10;            binding = itemView;&#10;        }&#10;&#10;        public void bind(int position, $OBJECT$ data, OnItemClickListener onItemClickListener) {&#10;&#10;            itemView.setOnClickListener(view -&gt; {&#10;                onItemClickListener.onItemClick(position);&#10;            });&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public Filter getFilter() {&#10;        return exampleFilter;&#10;    }&#10;    &#10;    private final Filter exampleFilter = new Filter() {&#10;        @Override&#10;        protected FilterResults performFiltering(CharSequence constraint) {&#10;            List&lt;$OBJECT$&gt; fildteredList = new ArrayList&lt;&gt;();&#10;            if (constraint == null || constraint.length() == 0) {&#10;                Collections.sort(listFilter, new Comparator&lt;$OBJECT$&gt;() {&#10;                    @Override&#10;                    public int compare($OBJECT$ o1, $OBJECT$ o2) {&#10;//                        return o1.getStrTv2().toLowerCase().compareTo(o2.getStrTv2().toLowerCase());&#10;                        return o1.toLowerCase().compareTo(o2.toLowerCase());&#10;                    }&#10;                });&#10;                fildteredList.addAll(listFilter);&#10;            } else {&#10;                String filterPattern = constraint.toString().toLowerCase().trim();&#10;&#10;                for ($OBJECT$ item : listFilter) {&#10;                    if (item.toLowerCase().contains(filterPattern)) {&#10;                        fildteredList.add(item);&#10;                    }&#10;                }&#10;            }&#10;            FilterResults results = new FilterResults();&#10;            results.values = fildteredList;&#10;            return results;&#10;        }&#10;&#10;        @Override&#10;        protected void publishResults(CharSequence constraint, FilterResults results) {&#10;            list.clear();&#10;            list.addAll((List) results.values);&#10;            notifyDataSetChanged();&#10;        }&#10;    };&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return list.size() &gt; 0 ? list.size() : 1;&#10;    }&#10;&#10;    public static class ViewHolderEmpty extends RecyclerView.ViewHolder {&#10;        public ViewHolderEmpty(@NonNull View itemView) {&#10;            super(itemView);&#10;        }&#10;    }&#10;&#10;    public interface OnItemClickListener {&#10;        void onItemClick(int position);&#10;    }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="OBJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="OBJECT_BINDING" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_single_image" value="&lt;LinearLayout&#10;    android:layout_marginBottom=&quot;@dimen/def_margin&quot;&#10;    android:layout_marginTop=&quot;@dimen/def_margin&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:gravity=&quot;center&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_weight=&quot;1&quot;&gt;&#10;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/img&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:scaleType=&quot;center&quot;&#10;        android:src=&quot;@drawable/ic_baseline_add_a_photo_24&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" description="Single Image" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_parent_view_single_foto" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/parent&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:fillViewport=&quot;true&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;com.google.android.material.appbar.AppBarLayout&#10;                style=&quot;@style/MyAppbarLayout&quot;&#10;                android:background=&quot;@color/white&quot;&gt;&#10;&#10;                &lt;com.google.android.material.appbar.MaterialToolbar style=&quot;@style/MyMaterialToolbar&quot;&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:gravity=&quot;center&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;                        &lt;ImageButton&#10;                            android:id=&quot;@+id/btn_back&quot;&#10;                            style=&quot;@style/MyCostumToolbarImage&quot;&#10;                            android:src=&quot;@drawable/mygzn_keyboard_arrow_left&quot;&#10;                            android:tag=&quot;CostumToolbarImage&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tv_toolbar&quot;&#10;                            style=&quot;@style/MyCostumToolbarTitle&quot;&#10;                            android:text=&quot;Single Foto&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/com.google.android.material.appbar.MaterialToolbar&gt;&#10;            &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;            &lt;View style=&quot;@style/MyDivider.Toolbar&quot; /&gt;&#10;&#10;            &lt;LinearLayout&#10;                style=&quot;@style/MyParentType&quot;&#10;                android:gravity=&quot;center&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_marginBottom=&quot;@dimen/def_margin&quot;&#10;                    android:layout_marginTop=&quot;@dimen/def_margin&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:gravity=&quot;center&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:id=&quot;@+id/img_foto&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:scaleType=&quot;centerInside&quot;&#10;                        android:src=&quot;@drawable/ic_baseline_add_a_photo_24&quot; /&gt;&#10;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;Button&#10;                    android:id=&quot;@+id/btn_simpan&quot;&#10;                    style=&quot;@style/MyButtonContained&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:text=&quot;Ambil Foto&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" description="For Activity Single Foto" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_visibility_in" value="AnimFunction.animationIn($VIEW$);" description="Anim In" toReformat="false" toShortenFQNames="true">
    <variable name="VIEW" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="gzn_visibility_out" value="AnimFunction.animationOut($VIEW$);" description="Anim Out" toReformat="false" toShortenFQNames="true">
    <variable name="VIEW" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="gzn_text_watcher" value="binding.$VIEW$.addTextChangedListener(new SimpleTextWatcher(s -&gt; {&#10;    &#10;}));" description="Simple Text Wathcher" toReformat="false" toShortenFQNames="true">
    <variable name="VIEW" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="gzn_radio_button" value="&lt;TextView&#10;    style=&quot;@style/MyTextHeader&quot;&#10;    android:layout_marginTop=&quot;0dp&quot;&#10;    android:text=&quot;Pilih Product Category&quot; /&gt;&#10;&#10;&lt;com.gzeinnumer.dr.DynamicRadioButton&#10;    android:id=&quot;@+id/dr_&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_marginTop=&quot;@dimen/def_margin_half&quot;&#10;    app:style=&quot;@style/def_radioButtonStyle&quot; /&gt;" description="Simple Radio Button" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_var_list_live_data" value="private final MutableLiveData&lt;List&lt;$OBJECT$&gt;&gt; $VAR_NAME$s = new MutableLiveData&lt;&gt;();&#10;&#10;public LiveData&lt;List&lt;$OBJECT$&gt;&gt; getList$CAP_VAR_NAME$() {&#10;    return $VAR_NAME$s;&#10;}&#10;public void setList$CAP_VAR_NAME$(){&#10;    $VAR_NAME$s.postValue(null);&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="OBJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_NAME" expression="camelCase(OBJECT)" defaultValue="" alwaysStopAt="false" />
    <variable name="CAP_VAR_NAME" expression="capitalize(camelCase(VAR_NAME))" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_visibility" value="android:visibility=&quot;gone&quot;&#10;tools:visibility=&quot;visible&quot;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML_ATTRIBUTE" value="true" />
    </context>
  </template>
  <template name="temp_pendingdata" value="$OBJECT$ $VAR_NAME$ = new $OBJECT$();&#10;List&lt;$OBJECT$&gt; $VAR_NAME$s = $VAR_NAME$.getSendDataAll(&quot;0&quot;);&#10;for (int i = 0; i &lt; $VAR_NAME$s.size(); i++) {&#10;    data.add(new PendingData(&quot;$OBJECT$&quot;, &quot;1&quot;));&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="OBJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_NAME" expression="camelCase(OBJECT)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="gzn_state_submit" value="private final MutableLiveData&lt;Integer&gt; stateSubmit = new MutableLiveData&lt;&gt;(0);&#10;public MutableLiveData&lt;Integer&gt; getStateSubmit() {&#10;    return stateSubmit;&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_parent_view_v2" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/parent&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;include&#10;        layout=&quot;@layout/widget_bg&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;com.google.android.material.appbar.AppBarLayout&#10;            style=&quot;@style/MyAppbarLayout&quot;&#10;            android:background=&quot;@color/white&quot;&gt;&#10;&#10;            &lt;com.google.android.material.appbar.MaterialToolbar style=&quot;@style/MyMaterialToolbar&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:gravity=&quot;center&quot;&gt;&#10;&#10;                    &lt;ImageButton&#10;                        android:id=&quot;@+id/btn_back&quot;&#10;                        style=&quot;@style/MyCostumToolbarImage&quot;&#10;                        android:src=&quot;@drawable/mygzn_keyboard_arrow_left&quot;&#10;                        android:tag=&quot;CostumToolbarImage&quot; /&gt;&#10;&#10;                    &lt;TextView&#10;                        android:id=&quot;@+id/tv_toolbar&quot;&#10;                        style=&quot;@style/MyCostumToolbarTitle&quot;&#10;                        android:text=&quot;MyCostumToolbarTitle&quot; /&gt;&#10;&#10;                    &lt;ImageButton&#10;                        android:id=&quot;@+id/btn_popup&quot;&#10;                        style=&quot;@style/MyOptionMenu&quot;&#10;                        android:src=&quot;@drawable/mygzn_more_vert&quot; /&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.appbar.MaterialToolbar&gt;&#10;        &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;        &lt;View style=&quot;@style/MyDivider.Toolbar&quot; /&gt;&#10;&#10;        &lt;LinearLayout style=&quot;@style/MyParentType&quot;&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_space" value="android:layout_marginTop=&quot;$space$&quot;&#10;android:layout_marginRight=&quot;$space$&quot;&#10;android:layout_marginLeft=&quot;$space$&quot;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="space" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML_ATTRIBUTE" value="true" />
    </context>
  </template>
  <template name="gzn_constrain_parent" value="app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;app:layout_constraintStart_toStartOf=&quot;parent&quot;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML_ATTRIBUTE" value="true" />
    </context>
  </template>
  <template name="gzn_rv_initial" value="DummyAdapterV2 adapter = new DummyAdapterV2(R.layout.$item$, 3, new DummyAdapterV2.OnItemClickListener() {&#10;    @Override&#10;    public void onItemClick(int position) {&#10;&#10;    }&#10;});&#10;binding.$rv$.setAdapter(adapter);&#10;binding.$rv$.setLayoutManager(new LinearLayoutManager(getApplicationContext()));&#10;binding.$rv$.hasFixedSize();" description="" toReformat="false" toShortenFQNames="true">
    <variable name="item" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="rv" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="text" value="&lt;TextView&#10;    android:id=&quot;@+id/tv_$id$&quot;&#10;    android:text=&quot;$text$&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;/&gt;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="text" expression="capitalize(id)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_ed_disable" value="android:editable=&quot;false&quot;&#10;android:inputType=&quot;none&quot;&#10;android:singleLine=&quot;true&quot;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML_ATTRIBUTE" value="true" />
    </context>
  </template>
  <template name="gzn_margin_ltr" value="android:layout_marginTop=&quot;@dimen/$margin$&quot;&#10;android:layout_marginRight=&quot;@dimen/$margin$&quot;&#10;android:layout_marginLeft=&quot;@dimen/$margin$&quot;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="margin" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML_ATTRIBUTE" value="true" />
    </context>
  </template>
  <template name="gzn_margin_lbr" value="android:layout_marginBottom=&quot;@dimen/$margin$&quot;&#10;android:layout_marginRight=&quot;@dimen/$margin$&quot;&#10;android:layout_marginLeft=&quot;@dimen/$margin$&quot;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="margin" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="XML_ATTRIBUTE" value="true" />
    </context>
  </template>
  <template name="gzn_validate" value="private void validate() {&#10;    Validator validator = new Validator();&#10;    validator.addView();&#10;    boolean result = validator.validate();&#10;    if (result){&#10;    &#10;    }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_act_init_adapter" value="private void init$name$() {&#10;    ArrayList&lt;String&gt; level1 = new ArrayList&lt;&gt;();&#10;    level1.add(&quot;Option 1&quot;);&#10;    level1.add(&quot;Option 2&quot;);&#10;    new DynamicOptionMenuBuilder&lt;String&gt;(getSupportFragmentManager())&#10;        .builder(level1)&#10;        .setTitle(&quot;Pilih $brand$&quot;)&#10;        .finalCallBack(new DynamicOptionMenu.CallBackFinal&lt;String&gt;() {&#10;            @Override&#10;            public void positionItem(String data) {&#10;                binding.ed$name$.setText(data);&#10;                binding.ed$name$.setError(null);&#10;            }&#10;        }).show();&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="brand" expression="capitalize(name)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="gzn_parent_view_dialog" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/dialog_canvas&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@drawable/rounded_corner&quot;&#10;    android:gravity=&quot;center&quot;&#10;    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_margin=&quot;@dimen/def_margin&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        tools:ignore=&quot;UselessParent&quot;&gt;&#10;        &#10;    &lt;/LinearLayout&gt;&#10;&lt;/LinearLayout&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_var_live_data_response_list" value="private final LiveData&lt;BaseResource&lt;List&lt;$OBJECT$Response&gt;&gt;&gt; $VAR_NAME$;&#10;$VAR_NAME$ = repo$OBJECT$.get$OBJECT$();&#10;&#10;public void set$OBJECT$() {&#10;    repo$OBJECT$.set$OBJECT$();&#10;}&#10;&#10;public LiveData&lt;BaseResource&lt;List&lt;$OBJECT$Response&gt;&gt;&gt; get$OBJECT$() {&#10;    return $VAR_NAME$;&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="OBJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_NAME" expression="camelCase(OBJECT)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_var_live_data_response_repo_list" value="private MutableLiveData&lt;BaseResource&lt;List&lt;$OBJECT$Response&gt;&gt;&gt; $VAR_NAME$;&#10;$VAR_NAME$ = new MutableLiveData&lt;&gt;();&#10;&#10;public void set$CAP_VAR_NAME$(String id) {&#10;    $VAR_NAME$.postValue(BaseResource.loading());&#10;&#10;    if (isConnect()){&#10;        compositeDisposable.add(&#10;                apiService.get$CAP_VAR_NAME$(id)&#10;                        .subscribeOn(Schedulers.io())&#10;                        .observeOn(AndroidSchedulers.mainThread())&#10;                        .subscribe(response -&gt; {&#10;                            int code = response.code();&#10;                            BaseListResponse&lt;$OBJECT$Response&gt; res = response.body();&#10;                            if (res.getStatus().equals(BaseConstant.RES_SUCCESS)) {&#10;                                List&lt;$OBJECT$Response&gt; list = response.body().getData();&#10;                                $VAR_NAME$.postValue(BaseResource.success(res.getTitle(), res.getMessage(), list, res.getInfo().getTotal()));&#10;                            } else if(res.getStatus().equals(BaseConstant.RES_TC)) {&#10;                                $VAR_NAME$.postValue(BaseResource.error(res.getTitle(), BaseConstant.RES_TC_MSG));&#10;                            } else {&#10;                                String msg = GblFunction.msgDebugOrRelease(response.toString()+&quot;\n\n&quot;+res.getMessage(), res.getMessage());&#10;                                $VAR_NAME$.postValue(BaseResource.error(res.getTitle(), msg));&#10;                            }&#10;                        }, throwable -&gt; {&#10;                            String msg = GblFunction.msgDebugOrRelease(throwable.getMessage(), BaseConstant.RES_TC_MSG);&#10;                            $VAR_NAME$.postValue(BaseResource.error(BaseConstant.RES_TC_MSG_TITLE,msg));&#10;                        })&#10;        );&#10;    } else {&#10;        $VAR_NAME$.postValue(BaseResource.error(&quot;Error&quot;, BaseConstant.RES_TC_MSG));&#10;    }&#10;}&#10;&#10;public MutableLiveData&lt;BaseResource&lt;List&lt;$OBJECT$Response&gt;&gt;&gt; get$CAP_VAR_NAME$() {&#10;    return $VAR_NAME$;&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="OBJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_NAME" expression="camelCase(OBJECT)" defaultValue="" alwaysStopAt="false" />
    <variable name="CAP_VAR_NAME" expression="capitalize(camelCase(VAR_NAME))" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_to_debug" value="public String toDebug() {&#10;    return new GsonBuilder().setPrettyPrinting().create().toJson(this, $className$.class);&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="className" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_var_live_data_response_repo_object" value="private MutableLiveData&lt;BaseResource&lt;$OBJECT$Response&gt;&gt; $VAR_NAME$;&#10;$VAR_NAME$ = new MutableLiveData&lt;&gt;();&#10;&#10;public void set$CAP_VAR_NAME$(String id) {&#10;    $VAR_NAME$.postValue(BaseResource.loading());&#10;&#10;    if (isConnect()){&#10;        compositeDisposable.add(&#10;                apiService.get$CAP_VAR_NAME$(id)&#10;                        .subscribeOn(Schedulers.io())&#10;                        .observeOn(AndroidSchedulers.mainThread())&#10;                        .subscribe(response -&gt; {&#10;                            int code = response.code();&#10;                            BaseObjectResponse&lt;$OBJECT$Response&gt; res = response.body();&#10;                            if (res.getStatus().equals(BaseConstant.RES_SUCCESS)) {&#10;                                $OBJECT$Response list = response.body().getData();&#10;                                $VAR_NAME$.postValue(BaseResource.success(res.getTitle(), res.getMessage(), list, 1));&#10;                            } else if(res.getStatus().equals(BaseConstant.RES_TC)) {&#10;                                $VAR_NAME$.postValue(BaseResource.error(res.getTitle(), BaseConstant.RES_TC_MSG));&#10;                            } else {&#10;                                String msg = GblFunction.msgDebugOrRelease(response.toString()+&quot;\n\n&quot;+res.getMessage(), res.getMessage());&#10;                                $VAR_NAME$.postValue(BaseResource.error(res.getTitle(), msg));&#10;                            }&#10;                        }, throwable -&gt; {&#10;                            String msg = GblFunction.msgDebugOrRelease(throwable.getMessage(), BaseConstant.RES_TC_MSG);&#10;                            $VAR_NAME$.postValue(BaseResource.error(BaseConstant.RES_TC_MSG_TITLE,msg));&#10;                        })&#10;        );&#10;    } else {&#10;        $VAR_NAME$.postValue(BaseResource.error(BaseConstant.RES_TC_MSG_TITLE, BaseConstant.RES_TC_MSG));&#10;    }&#10;}&#10;&#10;public MutableLiveData&lt;BaseResource&lt;$OBJECT$Response&gt;&gt; get$CAP_VAR_NAME$() {&#10;    return $VAR_NAME$;&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="OBJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_NAME" expression="camelCase(OBJECT)" defaultValue="" alwaysStopAt="false" />
    <variable name="CAP_VAR_NAME" expression="capitalize(camelCase(VAR_NAME))" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_var_live_data_response_object" value="private final LiveData&lt;BaseResource&lt;$OBJECT$Response&gt;&gt; $VAR_NAME$;&#10;$VAR_NAME$ = repo.get$OBJECT$();&#10;&#10;public void set$OBJECT$() {&#10;    repo.set$OBJECT$();&#10;}&#10;&#10;public LiveData&lt;BaseResource&lt;$OBJECT$Response&gt;&gt; get$OBJECT$() {&#10;    return $VAR_NAME$;&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="OBJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_NAME" expression="camelCase(OBJECT)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_observer" value="vm.$OBSERVER$().observe(this, resource -&gt; {&#10;    switch (resource.status) {&#10;        case STATUS_1_SUCCESS:&#10;            onHideLoading();&#10;            //debugDialog(resource.toDebug());&#10;            break;&#10;        case STATUS_2_ERROR:&#10;            onHideLoading();&#10;            onShowInfoDialogError(resource.title, resource.message);&#10;            break;&#10;        case STATUS_6_LOADING:&#10;            onShowLoading();&#10;            break;&#10;    }&#10;});" description="" toReformat="false" toShortenFQNames="true">
    <variable name="OBSERVER" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="gzn_cv_radius" value=" &lt;androidx.cardview.widget.CardView&#10;    android:layout_width=&quot;wrap_content&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_marginTop=&quot;@dimen/space&quot;&#10;    app:cardCornerRadius=&quot;@dimen/radius&quot;&#10;    app:cardElevation=&quot;0dp&quot;&gt;&#10;&lt;/androidx.cardview.widget.CardView&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_debug" value="if (BuildConfig.DEBUG) {&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="gzn_paging1_4_vm" value="private LiveData&lt;PagedList&lt;$OBJECT$Response&gt;&gt; $VAR_NAME$;&#10;initPager$OBJECT$(application.getApplicationContext());&#10;private void initPager$OBJECT$(Context applicationContext) {&#10;    $OBJECT$DSFactory $VAR_NAME$DSFactory = new $OBJECT$DSFactory(applicationContext);&#10;    LiveData&lt;PageKeyedDataSource&lt;Integer, $OBJECT$Response&gt;&gt; liveDataSource = $VAR_NAME$DSFactory.getItemLiveDataSource();&#10;    PagedList.Config pagedListConfig = (new PagedList.Config.Builder())&#10;            .setEnablePlaceholders(false)&#10;            .setPageSize($OBJECT$DS.PAGE_SIZE)&#10;            .build();&#10;&#10;    $VAR_NAME$ = (new LivePagedListBuilder($VAR_NAME$DSFactory, pagedListConfig)).build();&#10;}&#10;public LiveData&lt;PagedList&lt;$OBJECT$Response&gt;&gt; get$OBJECT$() {&#10;    return $VAR_NAME$;&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="OBJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_NAME" expression="camelCase(OBJECT)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_paging1_5_observer" value="vm.get$VM$().observe(this, resource -&gt; {&#10;    adapter.submitList(resource);&#10;});" description="" toReformat="false" toShortenFQNames="true">
    <variable name="VM" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="test_feni" value="Log.d($TAG$, $MESG$);" description="" toReformat="false" toShortenFQNames="true">
    <variable name="TAG" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MESG" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="gzn_rm_read_copy" value="&#10;---&#10;&#10;```&#10;Copyright 2023 M. Fadli Zein&#10;```" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="false" />
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="OTHER" value="true" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="c" value="false" />
      <option name="cpp" value="false" />
      <option name="objc" value="false" />
    </context>
  </template>
  <template name="gzn_rm_code_java" value="- $name$.java&#10;```java&#10;```" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="false" />
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="OTHER" value="true" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="c" value="false" />
      <option name="cpp" value="false" />
      <option name="objc" value="false" />
    </context>
  </template>
  <template name="gzn_rm_code_xml" value="- $name$.xml&#10;```xml&#10;```" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="false" />
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="OTHER" value="true" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="c" value="false" />
      <option name="cpp" value="false" />
      <option name="objc" value="false" />
    </context>
  </template>
  <template name="gzn_rm_code_kotlin" value="- $name$.kt&#10;```kotlin&#10;```" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="false" />
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="OTHER" value="true" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="c" value="false" />
      <option name="cpp" value="false" />
      <option name="objc" value="false" />
    </context>
  </template>
  <template name="gzn_rm_preview" value="&lt;pre&gt;&#10;&lt;img src=&quot;/preview/&quot; width=&quot;300&quot;&gt; &#10;&lt;/pre&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="false" />
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="OTHER" value="true" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="c" value="false" />
      <option name="cpp" value="false" />
      <option name="objc" value="false" />
    </context>
  </template>
  <template name="gzn_rm_img_v1" value="&lt;img src=&quot;/preview/&quot; width=&quot;300&quot;&gt; " description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="false" />
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="OTHER" value="true" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="c" value="false" />
      <option name="cpp" value="false" />
      <option name="objc" value="false" />
    </context>
  </template>
  <template name="gzn_rm_preview_v2" value="&lt;pre&gt;&#10;&lt;img src=&quot;preview/example$count$.jpg&quot; width=&quot;300&quot;&gt;&#10;&lt;/pre&gt;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="count" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="OTHER" value="true" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="c" value="false" />
      <option name="cpp" value="false" />
      <option name="objc" value="false" />
    </context>
  </template>
  <template name="gzn_rm_preview_v3" value="![](preview/preview$count$.jpg)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="count" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="OTHER" value="true" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="c" value="false" />
      <option name="cpp" value="false" />
      <option name="objc" value="false" />
    </context>
  </template>
  <template name="gzn_rm_preview_v2_sub" value="&lt;img src=&quot;preview/preview$count$.jpg&quot; width=&quot;300&quot;&gt;&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="count" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="OTHER" value="true" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="c" value="false" />
      <option name="cpp" value="false" />
      <option name="objc" value="false" />
    </context>
  </template>
  <template name="gzn_rm_training" value="&#10;[Source]()&#10; &#10;&lt;pre&gt;&#10;&lt;img src=&quot;preview/example1.png&quot; width=&quot;300&quot;&gt;&#10;&lt;img src=&quot;preview/example2.png&quot; width=&quot;300&quot;&gt;&#10;&lt;/pre&gt;&#10;&#10;---&#10;&#10;```&#10;Copyright 2022 M. Fadli Zein&#10;```" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="false" />
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="OTHER" value="true" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="c" value="false" />
      <option name="cpp" value="false" />
      <option name="objc" value="false" />
    </context>
  </template>
  <template name="gzn_paging_v2_parent_view_tablayout" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/parent&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;androidx.core.widget.NestedScrollView&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        android:fillViewport=&quot;true&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;com.google.android.material.appbar.AppBarLayout&#10;                style=&quot;@style/MyAppbarLayout&quot;&#10;                android:background=&quot;@color/white&quot;&gt;&#10;&#10;                &lt;com.google.android.material.appbar.MaterialToolbar style=&quot;@style/MyMaterialToolbar&quot;&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:gravity=&quot;center&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;                        &lt;ImageButton&#10;                            android:id=&quot;@+id/btn_back&quot;&#10;                            style=&quot;@style/MyCostumToolbarImage&quot;&#10;                            android:src=&quot;@drawable/mygzn_keyboard_arrow_left&quot;&#10;                            android:tag=&quot;CostumToolbarImage&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tv_toolbar&quot;&#10;                            style=&quot;@style/MyCostumToolbarTitle&quot;&#10;                            android:text=&quot;Product&quot; /&gt;&#10;&#10;                        &lt;ImageButton&#10;                            android:id=&quot;@+id/btn_popup&quot;&#10;                            style=&quot;@style/MyOptionMenu&quot;&#10;                            android:src=&quot;@drawable/mygzn_more_vert&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/com.google.android.material.appbar.MaterialToolbar&gt;&#10;            &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;            &lt;View style=&quot;@style/MyDivider.Toolbar&quot; /&gt;&#10;&#10;            &lt;androidx.swiperefreshlayout.widget.SwipeRefreshLayout&#10;                android:id=&quot;@+id/swipeRefreshLayout&quot;&#10;                style=&quot;@style/swipeRefreshLayoutV1&quot;&gt;&#10;&#10;                &lt;LinearLayout style=&quot;@style/MyParentType.List&quot;&gt;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:id=&quot;@+id/ll_filter_text&quot;&#10;                            style=&quot;@style/MyLinearLayout.White&quot;&#10;                            android:layout_width=&quot;match_parent&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:gravity=&quot;center_vertical&quot;&#10;                            android:layout_marginTop=&quot;@dimen/space_half&quot;&#10;                            android:visibility=&quot;gone&quot;&#10;                            tools:visibility=&quot;visible&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/tv_filter_text&quot;&#10;                                style=&quot;@style/MyTextContent&quot;&#10;                                android:text=&quot;2021-12-27 sd 2021-12-28&quot;&#10;                                android:textColor=&quot;@color/colorPrimary&quot; /&gt;&#10;&#10;                            &lt;ImageView&#10;                                android:id=&quot;@+id/img_clear_filter&quot;&#10;                                android:layout_marginStart=&quot;@dimen/def_margin_half&quot;&#10;                                android:src=&quot;@drawable/ic_baseline_cancel_24&quot;&#10;                                android:layout_width=&quot;15dp&quot;&#10;                                android:layout_height=&quot;15dp&quot;&#10;                                android:layout_marginLeft=&quot;@dimen/def_margin_half&quot; /&gt;&#10;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;com.google.android.material.tabs.TabLayout&#10;                            android:id=&quot;@+id/tab_layout&quot;&#10;                            android:layout_width=&quot;match_parent&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_marginTop=&quot;@dimen/space_half&quot;&#10;                            android:background=&quot;@color/white&quot;&#10;                            app:tabIndicatorColor=&quot;@color/colorAccent&quot;&#10;                            app:tabSelectedTextColor=&quot;@color/colorAccent&quot;&#10;                            app:tabTextAppearance=&quot;@style/TabLayoutText&quot;&#10;                            app:tabTextColor=&quot;@color/grey_500&quot;&gt;&#10;&#10;                            &lt;com.google.android.material.tabs.TabItem&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;All&quot; /&gt;&#10;&#10;                            &lt;com.google.android.material.tabs.TabItem&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;2022-05&quot; /&gt;&#10;&#10;                        &lt;/com.google.android.material.tabs.TabLayout&gt;&#10;&#10;                        &lt;androidx.recyclerview.widget.RecyclerView&#10;                            android:id=&quot;@+id/rv&quot;&#10;                            style=&quot;@style/LLEmptyStateRV&quot;&#10;                            android:visibility=&quot;gone&quot;&#10;                            tools:itemCount=&quot;3&quot;&#10;                            tools:listitem=&quot;@layout/item_product&quot;&#10;                            tools:visibility=&quot;visible&quot; /&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:id=&quot;@+id/imgEmpty&quot;&#10;                            style=&quot;@style/LLEmptyState&quot;&#10;                            android:visibility=&quot;gone&quot;&#10;                            tools:visibility=&quot;visible&quot;&gt;&#10;&#10;                            &lt;ImageView&#10;                                style=&quot;@style/LLEmptyStateImage&quot;&#10;                                android:src=&quot;@drawable/img_no_data_v3&quot; /&gt;&#10;&#10;                        &lt;/LinearLayout&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/androidx.swiperefreshlayout.widget.SwipeRefreshLayout&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/androidx.core.widget.NestedScrollView&gt;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_paging_v2_parent_view" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/parent&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;androidx.core.widget.NestedScrollView&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        android:fillViewport=&quot;true&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;com.google.android.material.appbar.AppBarLayout&#10;                style=&quot;@style/MyAppbarLayout&quot;&#10;                android:background=&quot;@color/white&quot;&gt;&#10;&#10;                &lt;com.google.android.material.appbar.MaterialToolbar style=&quot;@style/MyMaterialToolbar&quot;&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:gravity=&quot;center&quot;&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;                        &lt;ImageButton&#10;                            android:id=&quot;@+id/btn_back&quot;&#10;                            style=&quot;@style/MyCostumToolbarImage&quot;&#10;                            android:src=&quot;@drawable/mygzn_keyboard_arrow_left&quot;&#10;                            android:tag=&quot;CostumToolbarImage&quot; /&gt;&#10;&#10;                        &lt;TextView&#10;                            android:id=&quot;@+id/tv_toolbar&quot;&#10;                            style=&quot;@style/MyCostumToolbarTitle&quot;&#10;                            android:text=&quot;Product&quot; /&gt;&#10;&#10;                        &lt;ImageButton&#10;                            android:id=&quot;@+id/btn_popup&quot;&#10;                            style=&quot;@style/MyOptionMenu&quot;&#10;                            android:src=&quot;@drawable/mygzn_more_vert&quot; /&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/com.google.android.material.appbar.MaterialToolbar&gt;&#10;            &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;            &lt;View style=&quot;@style/MyDivider.Toolbar&quot; /&gt;&#10;&#10;            &lt;androidx.swiperefreshlayout.widget.SwipeRefreshLayout&#10;                android:id=&quot;@+id/swipeRefreshLayout&quot;&#10;                style=&quot;@style/swipeRefreshLayoutV1&quot;&gt;&#10;&#10;                &lt;LinearLayout style=&quot;@style/MyParentType.List&quot;&gt;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:id=&quot;@+id/ll_filter_text&quot;&#10;                            style=&quot;@style/MyLinearLayout.White&quot;&#10;                            android:layout_width=&quot;match_parent&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:gravity=&quot;center_vertical&quot;&#10;                            android:layout_marginTop=&quot;@dimen/space_half&quot;&#10;                            android:visibility=&quot;gone&quot;&#10;                            tools:visibility=&quot;visible&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/tv_filter_text&quot;&#10;                                style=&quot;@style/MyTextContent&quot;&#10;                                android:text=&quot;2021-12-27 sd 2021-12-28&quot;&#10;                                android:textColor=&quot;@color/colorPrimary&quot; /&gt;&#10;&#10;                            &lt;ImageView&#10;                                android:id=&quot;@+id/img_clear_filter&quot;&#10;                                android:layout_marginStart=&quot;@dimen/def_margin_half&quot;&#10;                                android:src=&quot;@drawable/ic_baseline_cancel_24&quot;&#10;                                android:layout_width=&quot;15dp&quot;&#10;                                android:layout_height=&quot;15dp&quot;&#10;                                android:layout_marginLeft=&quot;@dimen/def_margin_half&quot; /&gt;&#10;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;androidx.recyclerview.widget.RecyclerView&#10;                            android:id=&quot;@+id/rv&quot;&#10;                            style=&quot;@style/LLEmptyStateRV&quot;&#10;                            android:visibility=&quot;gone&quot;&#10;                            tools:itemCount=&quot;3&quot;&#10;                            tools:listitem=&quot;@layout/item_product&quot;&#10;                            tools:visibility=&quot;visible&quot; /&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:id=&quot;@+id/imgEmpty&quot;&#10;                            style=&quot;@style/LLEmptyState&quot;&#10;                            android:visibility=&quot;gone&quot;&#10;                            tools:visibility=&quot;visible&quot;&gt;&#10;&#10;                            &lt;ImageView&#10;                                style=&quot;@style/LLEmptyStateImage&quot;&#10;                                android:src=&quot;@drawable/img_no_data_v3&quot; /&gt;&#10;&#10;                        &lt;/LinearLayout&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/androidx.swiperefreshlayout.widget.SwipeRefreshLayout&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/androidx.core.widget.NestedScrollView&gt;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_paging_v2_style" value="    &lt;style name=&quot;CustomDialogStyleFilter&quot; parent=&quot;Theme.MaterialComponents.Light.Dialog&quot;&gt;&#10;        &lt;item name=&quot;android:windowMinWidthMajor&quot;&gt;80%&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowMinWidthMinor&quot;&gt;80%&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowEnterAnimation&quot;&gt;@anim/anim_in&lt;/item&gt;&#10;        &lt;item name=&quot;android:windowExitAnimation&quot;&gt;@anim/anim_out&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;&#10;        &lt;item name=&quot;colorPrimaryVariant&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;&#10;        &lt;item name=&quot;colorOnPrimary&quot;&gt;@color/white&lt;/item&gt;&#10;    &lt;/style&gt;&#10;    &#10;    &lt;style name=&quot;swipeRefreshLayoutV1&quot;&gt;&#10;        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_height&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_weight&quot;&gt;1&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;LLEmptyStateRV&quot;&gt;&#10;        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_height&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_weight&quot;&gt;1&lt;/item&gt;&#10;        &lt;item name=&quot;android:overScrollMode&quot;&gt;never&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;LLEmptyState&quot;&gt;&#10;        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_height&quot;&gt;0dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_weight&quot;&gt;1&lt;/item&gt;&#10;        &lt;item name=&quot;android:gravity&quot;&gt;center&lt;/item&gt;&#10;        &lt;item name=&quot;android:orientation&quot;&gt;vertical&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;LLEmptyStateImage&quot;&gt;&#10;        &lt;item name=&quot;android:layout_width&quot;&gt;300dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;&#10;        &lt;item name=&quot;android:adjustViewBounds&quot;&gt;true&lt;/item&gt;&#10;        &lt;item name=&quot;android:scaleType&quot;&gt;fitCenter&lt;/item&gt;&#10;        &lt;item name=&quot;android:src&quot;&gt;@drawable/img_no_data_v3&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&#10;    &lt;style name=&quot;TabLayoutText&quot; parent=&quot;TextAppearance.Design.Tab&quot;&gt;&#10;        &lt;item name=&quot;textAllCaps&quot;&gt;false&lt;/item&gt;&#10;    &lt;/style&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_paging_v2_base_activity" value="protected void swipe(SwipeRefreshLayout swipeRefreshLayout, boolean swipe) {&#10;    swipeRefreshLayout.setRefreshing(swipe);&#10;}&#10;&#10;protected void emptyState(int size, RecyclerView rv, LinearLayout imgEmpty) {&#10;    rv.setVisibility(View.GONE);&#10;    imgEmpty.setVisibility(View.GONE);&#10;&#10;    rv.setVisibility(size == 0 ? View.GONE : View.VISIBLE);&#10;    imgEmpty.setVisibility(size == 0 ? View.VISIBLE : View.GONE);&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_style_color" value="&lt;color name=&quot;colorPrimary&quot;&gt;@color/purple_500&lt;/color&gt;&#10;&lt;color name=&quot;colorPrimaryDark&quot;&gt;@color/purple_700&lt;/color&gt;&#10;&lt;color name=&quot;colorAccent&quot;&gt;@color/teal_200&lt;/color&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_dialog_filter_view" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/dialog_canvas&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_gravity=&quot;center_vertical|bottom&quot;&#10;    android:background=&quot;@drawable/filter_background_color&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;@dimen/def_margin&quot;&gt;&#10;&#10;    &lt;TextView&#10;        style=&quot;@style/MyTextHeader&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        android:layout_marginTop=&quot;0dp&quot;&#10;        android:text=&quot;Silahkan Pilih Filter&quot; /&gt;&#10;&#10;    &lt;View&#10;        style=&quot;@style/MyDivider&quot;&#10;        android:background=&quot;@color/colorPrimary&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        style=&quot;@style/MyTextHeader&quot;&#10;        android:text=&quot;Pilih Tanggal&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:id=&quot;@+id/ed_start_date_p&quot;&#10;            style=&quot;@style/MyAutoCompleteTextViewFilledBox.V2&quot;&#10;            android:layout_marginTop=&quot;@dimen/space&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:hint=&quot;Start Date&quot;&#10;            app:endIconMode=&quot;none&quot;&gt;&#10;&#10;            &lt;AutoCompleteTextView&#10;                android:id=&quot;@+id/ed_start_date&quot;&#10;                style=&quot;@style/MyAutoCompleteTextView.V2&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:id=&quot;@+id/ed_end_date_p&quot;&#10;            style=&quot;@style/MyAutoCompleteTextViewFilledBox.V2&quot;&#10;            android:layout_marginTop=&quot;@dimen/space&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;@dimen/def_margin&quot;&#10;            android:layout_marginLeft=&quot;@dimen/def_margin&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:hint=&quot;End Date&quot;&#10;            app:endIconMode=&quot;none&quot;&gt;&#10;&#10;            &lt;AutoCompleteTextView&#10;                android:id=&quot;@+id/ed_end_date&quot;&#10;                style=&quot;@style/MyAutoCompleteTextView.V2&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;View&#10;        style=&quot;@style/MyDivider&quot;&#10;        android:background=&quot;@color/colorPrimary&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;@dimen/space_half&quot;&#10;        android:gravity=&quot;center&quot;&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn_pilih_ulang&quot;&#10;            style=&quot;@style/MyButtonOutlined&quot;&#10;            android:text=&quot;Pilih Ulang&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn_pilih&quot;&#10;            style=&quot;@style/MyButtonContained&quot;&#10;            android:layout_marginStart=&quot;@dimen/def_margin&quot;&#10;            android:layout_marginLeft=&quot;@dimen/def_margin&quot;&#10;            android:text=&quot;Pilih&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/LinearLayout&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_paging_v2_filter_dialog" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/dialog_canvas&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_gravity=&quot;center_vertical|bottom&quot;&#10;    android:background=&quot;@drawable/filter_background_color&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;@dimen/def_margin&quot;&gt;&#10;&#10;    &lt;TextView&#10;        style=&quot;@style/MyTextHeader&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        android:layout_marginTop=&quot;0dp&quot;&#10;        android:text=&quot;Silahkan Pilih Filter&quot; /&gt;&#10;&#10;    &lt;View&#10;        style=&quot;@style/MyDivider&quot;&#10;        android:background=&quot;@color/colorPrimary&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        style=&quot;@style/MyTextHeader&quot;&#10;        android:text=&quot;Pilih Tanggal&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:id=&quot;@+id/ed_start_date_p&quot;&#10;            style=&quot;@style/MyAutoCompleteTextViewFilledBox.V2&quot;&#10;            android:layout_marginTop=&quot;@dimen/space&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:hint=&quot;Start Date&quot;&#10;            app:endIconMode=&quot;none&quot;&gt;&#10;&#10;            &lt;AutoCompleteTextView&#10;                android:id=&quot;@+id/ed_start_date&quot;&#10;                style=&quot;@style/MyAutoCompleteTextView.V2&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:id=&quot;@+id/ed_end_date_p&quot;&#10;            style=&quot;@style/MyAutoCompleteTextViewFilledBox.V2&quot;&#10;            android:layout_marginTop=&quot;@dimen/space&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;@dimen/def_margin&quot;&#10;            android:layout_marginLeft=&quot;@dimen/def_margin&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:hint=&quot;End Date&quot;&#10;            app:endIconMode=&quot;none&quot;&gt;&#10;&#10;            &lt;AutoCompleteTextView&#10;                android:id=&quot;@+id/ed_end_date&quot;&#10;                style=&quot;@style/MyAutoCompleteTextView.V2&quot; /&gt;&#10;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;View&#10;        style=&quot;@style/MyDivider&quot;&#10;        android:background=&quot;@color/colorPrimary&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;@dimen/space_half&quot;&#10;        android:gravity=&quot;center&quot;&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn_pilih_ulang&quot;&#10;            style=&quot;@style/MyButtonOutlined&quot;&#10;            android:text=&quot;Pilih Ulang&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn_pilih&quot;&#10;            style=&quot;@style/MyButtonContained&quot;&#10;            android:layout_marginStart=&quot;@dimen/def_margin&quot;&#10;            android:layout_marginLeft=&quot;@dimen/def_margin&quot;&#10;            android:text=&quot;Pilih&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/LinearLayout&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_nested" value="&lt;androidx.core.widget.NestedScrollView&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;LinearLayout style=&quot;@style/MyParentType.List&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_width=&quot;match_parent&quot;&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.core.widget.NestedScrollView&gt;&#10;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_nested_scroll" value="&lt;androidx.swiperefreshlayout.widget.SwipeRefreshLayout&#10;    android:id=&quot;@+id/swipeRefreshLayout&quot;&#10;    style=&quot;@style/swipeRefreshLayoutV1&quot;&gt;&#10;&#10;    &lt;androidx.core.widget.NestedScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;LinearLayout style=&quot;@style/MyParentType.List&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_width=&quot;match_parent&quot;&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/androidx.core.widget.NestedScrollView&gt;&#10;&lt;/androidx.swiperefreshlayout.widget.SwipeRefreshLayout&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_var_live_data_response_repo_list_sql" value="private MutableLiveData&lt;BaseResource&lt;List&lt;$OBJECT$&gt;&gt;&gt; $VAR_NAME$;&#10;$VAR_NAME$ = new MutableLiveData&lt;&gt;();&#10;&#10;public void set$CAP_VAR_NAME$(String id) {&#10;    $VAR_NAME$.postValue(BaseResource.loading());&#10;    $VAR_NAME$.postValue(BaseResource.success(&quot;&quot;, &quot;&quot;, new $OBJECT$().read(), 0));&#10;}&#10;&#10;public MutableLiveData&lt;BaseResource&lt;List&lt;$OBJECT$&gt;&gt;&gt; get$CAP_VAR_NAME$() {&#10;    return $VAR_NAME$;&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="OBJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_NAME" expression="camelCase(OBJECT)" defaultValue="" alwaysStopAt="false" />
    <variable name="CAP_VAR_NAME" expression="capitalize(camelCase(VAR_NAME))" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_var_live_data_response_list_sql" value="private final LiveData&lt;BaseResource&lt;List&lt;$OBJECT$&gt;&gt;&gt; $VAR_NAME$;&#10;$VAR_NAME$ = repo$OBJECT$.get$OBJECT$();&#10;&#10;public void set$OBJECT$() {&#10;    repo$OBJECT$.set$OBJECT$();&#10;}&#10;&#10;public LiveData&lt;BaseResource&lt;List&lt;$OBJECT$&gt;&gt;&gt; get$OBJECT$() {&#10;    return $VAR_NAME$;&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="OBJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VAR_NAME" expression="camelCase(OBJECT)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_tv_debug" value="&lt;TextView&#10;    android:id=&quot;@+id/tv_debug&quot;&#10;    style=&quot;@style/MyTextContent&quot;&#10;    android:text=&quot;MyTextContent&quot;&#10;    android:textSize=&quot;6sp&quot;&#10;    android:visibility=&quot;gone&quot;&#10;    tools:visibility=&quot;visible&quot; /&gt;" description="simple text view debug" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_rv_callback" value="private OnClick onClick;&#10;public interface OnClick{&#10;    void action();&#10;}&#10;public void setOnClick(OnClick onclick) {&#10;    this.onClick = onclick;&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_tv_content_horizontal" value="&lt;LinearLayout&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_marginTop=&quot;@dimen/space_half&quot;&#10;    android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;    &lt;TextView&#10;        style=&quot;@style/MyTextContent.Small.Grey.Light&quot;&#10;        android:text=&quot;$hint$&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:textAlignment=&quot;textEnd&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:id=&quot;@+id/tv_$id$&quot;&#10;        style=&quot;@style/MyTextContent&quot;&#10;        android:text=&quot;-&quot; /&gt;&#10;&lt;/LinearLayout&gt;" description="sub and detail content" toReformat="false" toShortenFQNames="true">
    <variable name="id" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="hint" expression="capitalize(underscoresToSpaces(underscoresToCamelCase(id)))" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_parent_view_linear" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout&#10;    android:orientation=&quot;vertical&quot;&#10;    android:gravity=&quot;center&quot; xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;&lt;/LinearLayout&gt;" description="Simple Xml View" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="gzn_viewbinding_implements" value="buildFeatures{&#10;    viewBinding = true&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="true" />
    </context>
  </template>
  <template name="gzn_link" value="- []()" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="false" />
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="OTHER" value="true" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="c" value="false" />
      <option name="cpp" value="false" />
      <option name="objc" value="false" />
    </context>
  </template>
  <template name="gzn_viewbinding" value="private $BINDING$ binding;&#10;binding = $BINDING$.inflate(getLayoutInflater());&#10;setContentView(binding.getRoot());" description="" toReformat="false" toShortenFQNames="true">
    <variable name="BINDING" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_to_debug_string" value="@Override&#10;public String toString() {&#10;    return new GsonBuilder().setPrettyPrinting().create().toJson(this, $className$.class);&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="className" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gzn_btn_small" value="&#10;android:minWidth=&quot;0dp&quot;&#10;android:minHeight=&quot;0dp&quot;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML_ATTRIBUTE" value="true" />
    </context>
  </template>
  <template name="gzn_dart_text" value="Text('$name$')" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dark_textAlign" value="textAlign: TextAlign." description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dark_appbar" value="AppBar(&#10;  title: const Text(&quot;$title$&quot;),&#10;)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="title" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dark_listview" value="ListView(&#10;  children: [],&#10;)" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_listtile" value="ListTile(&#10;  title: $title$,&#10;)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="title" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_controller" value="final _$title$Controller = TextEditingController();" description="" toReformat="false" toShortenFQNames="true">
    <variable name="title" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gzn_dart_textfield_controller_hint" value="TextField(&#10;    controller: $controller$,&#10;    decoration: const InputDecoration(labelText: &quot;$hint$&quot;),&#10;)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="controller" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="hint" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_instance_session" value="final _preferencesService = PreferencesService();" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gzn_dart_elevatedbutton" value="ElevatedButton(&#10;    child: const Text(&quot;$title$&quot;),&#10;    onPressed: () {},&#10;)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="title" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_gridview" value="GridView.builder(&#10;  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 3),&#10;  itemBuilder: (context, index){&#10;&#10;  }&#10;)" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_L3_blocbuilder_L3" value="BlocBuilder&lt;$name$Bloc, $name$State&gt;(&#10;  builder: (context, state) {&#10;    //L3&#10;    final status = state.status;&#10;    if(status is $name$OnLoadingStatus){&#10;      final c = state.status as $name$OnLoadingStatus;&#10;      return const LoadingV1();&#10;    } else if (status is $name$OnFailedStatus || status is $name$OnErrorStatus) {&#10;          return Center(&#10;            child: ButtonV1(&#10;              label: 'Try Again',&#10;              onPressed: () {&#10;                context.read&lt;$name$Bloc&gt;().add($name$InitEvent());&#10;              },&#10;            ),&#10;          );&#10;    } else if(status is $name$OnSuccessStatus){&#10;      final c = state.status as $name$OnSuccessStatus;&#10;      &#10;      return const Center(&#10;        child: Text(&quot;Go Back&quot;),&#10;      );&#10;    } else if(status is $name$InitDoneStatus){&#10;      final c = state.status as $name$InitDoneStatus;&#10;      &#10;      return const Center(&#10;        child: Text(&quot;Content&quot;),&#10;      );&#10;    } else {&#10;      return const Center(&#10;        child: Text(&quot;Something When Wrong&quot;),&#10;      );&#10;    }&#10;  },&#10;)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_L2_bloclistener_L2" value="//L2&#10;return BlocListener&lt;$name$Bloc, $name$State&gt;(&#10;  listener: (context, state) {&#10;    String TITLE = &quot;&quot;;&#10;    String MSG = &quot;&quot;;&#10;    VoidCallback ACTION = () {};&#10;    int TYPE = 1; //1 INFO 2 CONFIRM&#10;&#10;    final status = state.status;&#10;    if (status is $name$InitStatus) {&#10;      if (state.isSubmit) {&#10;       final c = state.status as $name$InitStatus;&#10;        TITLE = &quot;&quot;;&#10;        MSG = &quot;&quot;;&#10;        ACTION = () {};&#10;        TYPE = 1;&#10;      }&#10;    } else if (status is $name$OnLoadingStatus) {&#10;        if (state.isSubmit) {&#10;           final c = state.status as $name$OnLoadingStatus;&#10;            TITLE = &quot;&quot;;&#10;            MSG = &quot;&quot;;&#10;            ACTION = () {};&#10;            TYPE = 1;&#10;        }&#10;    } else if (status is $name$OnDebugStatus) {&#10;      if (state.isSubmit) {&#10;        final c = state.status as $name$OnDebugStatus;&#10;        TITLE = &quot;&quot;;&#10;        MSG = &quot;&quot;;&#10;        ACTION = () {};&#10;        TYPE = 1;&#10;      }&#10;    } else if (status is $name$OnErrorStatus) {&#10;      if (state.isSubmit) {&#10;        final c = state.status as $name$OnErrorStatus;&#10;        TITLE = &quot;&quot;;&#10;        MSG = &quot;&quot;;&#10;        ACTION = () {};&#10;        TYPE = 1;&#10;      }&#10;    } else if (status is $name$OnFailedStatus) {&#10;      if (state.isSubmit) {&#10;        final c = state.status as $name$OnFailedStatus;&#10;        TITLE = &quot;&quot;;&#10;        MSG = &quot;&quot;;&#10;        ACTION = () {};&#10;        TYPE = 1;&#10;      }&#10;    } else if (status is $name$OnSuccessStatus) {&#10;      if (state.isSubmit) {&#10;        final c = state.status as $name$OnSuccessStatus;&#10;        TITLE = &quot;&quot;;&#10;        MSG = &quot;&quot;;&#10;        ACTION = () {};&#10;        TYPE = 1;&#10;      }&#10;    } else if (status is $name$ExpiredStatus) {&#10;      if (state.isSubmit) {&#10;        final c = state.status as $name$ExpiredStatus;&#10;        TITLE = &quot;&quot;;&#10;        MSG = &quot;&quot;;&#10;        ACTION = () {};&#10;        TYPE = 1;&#10;      }&#10;    } else if (status is $name$OnDebugStatus) {&#10;      final c = state.status as $name$OnDebugStatus;&#10;      TITLE = &quot;&quot;;&#10;      MSG = &quot;&quot;;&#10;        ACTION = () {};&#10;        TYPE = 1;&#10;    } else{&#10;      TITLE = &quot;&quot;;&#10;      MSG = &quot;&quot;;&#10;        ACTION = () {};&#10;        TYPE = 1;&#10;    }&#10;&#10;    if (TITLE.isNotEmpty &amp;&amp; MSG.isNotEmpty) {&#10;      if (TYPE == 1) {&#10;        // info&#10;      } else if (TYPE == 2) {&#10;        // comfirm&#10;      }&#10;    }&#10;  },&#10;  child: Container(),&#10;);" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_blocread" value="context.read&lt;$name$Bloc&gt;().add($name$Event$Event$)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Event" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_fromjson" value="factory $name$.fromJson(Map&lt;String, dynamic&gt; json){&#10;    //final temp = json['temp'];&#10;    &#10;    //final main = json['main'];&#10;    //final tempInfo = Model.fromJson(main);&#10;    &#10;    //final results = (json['results'] as List).map((e) =&gt; ResultModel.fromJson(e)).toList();&#10;    return $name$();&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gzn_rm_reminder" value="#&#10;#### $name$&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="false" />
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="OTHER" value="true" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="c" value="false" />
      <option name="cpp" value="false" />
      <option name="objc" value="false" />
    </context>
  </template>
  <template name="gzn_dart_L1_blocmulti_provider_L1" value="MultiBlocProvider(&#10;    providers: [&#10;        //L1&#10;        BlocProvider&lt;$name$&gt;(create: (context) =&gt; $name$())&#10;    ],&#10;    child: Container(),&#10;)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_blocprovider" value="BlocProvider&lt;$name$Bloc&gt;(&#10;    create: (context) =&gt; $name$Bloc(), &#10;    child: Container(),&#10;)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_cubitbuilder" value="BlocBuilder&lt;$CUBIT$Cubit, $RES$&gt;(builder: (context, state) {&#10;    return Container();&#10;})" description="" toReformat="false" toShortenFQNames="true">
    <variable name="CUBIT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="RES" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_tc" value="try{&#10;    &#10;} on Error catch(e){&#10;    throw e;&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_blocread_v2" value="BlocProvider.of&lt;$Bloc$Bloc&gt;(context).add($Bloc$$Event$Event())" description="" toReformat="false" toShortenFQNames="true">
    <variable name="Bloc" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Event" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_repomulti" value="MultiRepositoryProvider(&#10;  providers: [&#10;    RepositoryProvider(create: (context) =&gt; $Name$Repo())&#10;  ],&#10;  child: Container(),&#10;)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_blocclass" value="import 'package:flutter_bloc/flutter_bloc.dart';&#10;&#10;class $TITLE$Bloc extends Bloc&lt;$TITLE$Event, $TITLE$State&gt;{&#10;  $TITLE$Bloc() : super($TITLE$State());&#10;  &#10;  @override&#10;  Stream&lt;$TITLE$State&gt; mapEventToState($TITLE$Event event) async* {&#10;    // TODO: implement mapEventToState&#10;    return super.mapEventToState(event);&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="TITLE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="gzein_dart_blocclassfull" value="import 'package:flutter_bloc/flutter_bloc.dart';&#10;&#10;class $TITLE$Bloc extends Bloc&lt;$TITLE$Event, $TITLE$State&gt;{&#10;  $TITLE$Bloc() : super(null);&#10;  &#10;  @override&#10;  Stream&lt;PokemonState&gt; mapEventToState($TITLE$Event event) {&#10;    // TODO: implement mapEventToState&#10;    return super.mapEventToState(event);&#10;  }&#10;}&#10;&#10;abstract class $TITLE$Event{&#10;&#10;}&#10;&#10;abstract class $TITLE$State{&#10;&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="TITLE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="gzn_dart_builder" value="Builder(&#10;    builder: (context) {&#10;      return Container();&#10;    },&#10;)" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_grid" value="GridView.builder(&#10;  itemCount: list.length,&#10;  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 3),&#10;  itemBuilder: (context, index) {&#10;    return Card(&#10;      child: GridTile(&#10;        child: Container(),&#10;      ),&#10;    );&#10;  },&#10;);" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="gzn_dart_listview_builder" value="ListView.builder(&#10;  itemCount: list.length,&#10;  itemBuilder: (context, index) {&#10;    return Card(&#10;      child: ListTile(&#10;        title: Container(),&#10;      ),&#10;    );&#10;  },&#10;)" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="gzn_tabbar" value="MaterialApp(&#10;  home: DefaultTabController(&#10;    length: 1,&#10;    child: Scaffold(&#10;      backgroundColor: Colors.white70,&#10;      appBar: AppBar(&#10;        bottom: const TabBar(&#10;          tabs: [&#10;            Text(&quot;List&quot;),&#10;          ],&#10;        ),&#10;      ),&#10;      body: TabBarView(&#10;        children: [&#10;          Container(),&#10;        ],&#10;      ),&#10;    ),&#10;  ),&#10;);" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="gzn_dart_view" value="import 'package:flutter/material.dart';&#10;&#10;class $NAME$View extends StatelessWidget {&#10;  const $NAME$View({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: const Text(&quot;$NAME$&quot;),&#10;      ),&#10;      body: Container(),&#10;    );&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="gzn_dart_http_future_list" value="Future&lt;List&lt;$MODEL$&gt;&gt; get$MODEL$() async{&#10;    try{&#10;      final url = Uri.https(_baseUrl, '/');&#10;      final response = await http.get(url);&#10;      final json = jsonDecode(response.body) as List;&#10;      final res = json.map((e) =&gt; $MODEL$.fromJson(e)).toList();&#10;      return res;&#10;    } on Error catch(e){&#10;      throw e;&#10;    }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="MODEL" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gzn_dart_blocinit" value="//event&#10;abstract class $TITLE$Event{}&#10;&#10;class $TITLE$InitEvent extends $TITLE$Event{}&#10;&#10;class $TITLE$RefreshEvent extends $TITLE$Event{}&#10;&#10;//state&#10;abstract class $TITLE$State{}&#10;&#10;class $TITLE$OnLoadingState extends $TITLE$State{}&#10;&#10;class $TITLE$OnSuccessState extends $TITLE$State{&#10;  final List&lt;$TITLE$&gt; list;&#10;&#10;  $TITLE$OnSuccessState(this.list);&#10;}&#10;&#10;class $TITLE$OnFailedState extends $TITLE$State{&#10;  final Error exception;&#10;&#10;  $TITLE$OnFailedState(this.exception);&#10;}&#10;&#10;//bloc&#10;class $TITLE$Bloc extends Bloc&lt;$TITLE$Event, $TITLE$State&gt;{&#10;  final _dataService = DataService();&#10;&#10;  $TITLE$Bloc() : super($TITLE$OnLoadingState());&#10;&#10;  @override&#10;  Stream&lt;$TITLE$State&gt; mapEventToState($TITLE$Event event) async* {&#10;    if(event is $TITLE$InitEvent || event is $TITLE$RefreshEvent){&#10;      yield $TITLE$OnLoadingState();&#10;      try{&#10;        final res = await _dataService.getPosts();&#10;        yield $TITLE$OnSuccessState(res);&#10;      } on Error catch(e){&#10;        yield $TITLE$OnFailedState(e);&#10;      }&#10;    }&#10;  }&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="TITLE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="gzn_rm_code_dart" value="- $name$.dart&#10;```dart&#10;```" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="false" />
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="OTHER" value="true" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="c" value="false" />
      <option name="cpp" value="false" />
      <option name="objc" value="false" />
    </context>
  </template>
  <template name="gzn_dart_cubitclass" value="import 'package:flutter_bloc/flutter_bloc.dart';&#10;&#10;class $name$Cubit extends Cubit&lt;$type$&gt;{&#10;  $name$Cubit() : super($def$);&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="def" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="gzn_dart_cubit_fun_nav" value="void show$name$Details($model$ value) {&#10;    return emit(value);&#10;}&#10;&#10;void popTo$name$(){&#10;    return emit($dev_value$);&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="model" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="dev_value" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gzn_dart_cubit_navigator" value="return Navigator(&#10;  pages: [&#10;    MaterialPage(child : )&#10;  ],&#10;  onPopPage: (route, result){&#10;    return route.didPop(result);&#10;  },&#10;);" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_cubitread_v2" value="BlocProvider.of&lt;$cubit$Cubit&gt;(context)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="cubit" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_cubitread" value="context.read&lt;$cubit$Cubit&gt;()" description="" toReformat="false" toShortenFQNames="true">
    <variable name="cubit" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_reporead" value="context.read&lt;$Repository$&gt;()" description="" toReformat="false" toShortenFQNames="true">
    <variable name="Repository" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_reporead_v2" value="RepositoryProvider.of&lt;$Repository$&gt;(context)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="Repository" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_blocfield_onchanged" value="onChanged: (value) =&gt; context.read&lt;$BLOC$Bloc&gt;().add($BLOC$$EVENT$Event(value))," description="" toReformat="false" toShortenFQNames="true">
    <variable name="BLOC" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="EVENT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_blocfield_onchanged_v2" value="onChanged: (value) =&gt; BlocProvider.of&lt;$BLOC$Bloc&gt;(context).add($BLOC$$EVENT$Event(value))," description="" toReformat="false" toShortenFQNames="true">
    <variable name="BLOC" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="EVENT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_formkey" value="final _formKey = GlobalKey&lt;FormState&gt;();" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gzn_dart_blocstate" value="class $TITLE$State {&#10;  final String? value;&#10;  bool get isValidValue =&gt; value.toString().length &gt; 3;&#10;  final $TITLE$Status? status;&#10;&#10;  $TITLE$State({&#10;    this.value = &quot;&quot;,&#10;    this.status = const $TITLE$InitialStatus(),&#10;  });&#10;&#10;  $TITLE$State copyWith({&#10;    String? value,&#10;    LoginStatus? status,&#10;  }) {&#10;    return $TITLE$State(&#10;      username: value ?? this.value,&#10;      status: status ?? this.status,&#10;    );&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="TITLE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_material_app" value="return MaterialApp(&#10;  debugShowCheckedModeBanner: false,&#10;  home: Container(),&#10;);" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_widget_fun" value="Widget _$name$(){&#10;  return Container();&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_grafity" value="mainAxisAlignment: MainAxisAlignment.center,&#10;crossAxisAlignment: CrossAxisAlignment.center," description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_delay" value="await Future.delayed(const Duration(seconds: 3));" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_formkey_validate" value="if(_formKey.currentState!.validate()){&#10;  &#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_snackbar" value="void _showSnackbar(BuildContext context, String message) {&#10;  final snackBar = SnackBar(content: Text(message));&#10;  ScaffoldMessenger.of(context).showSnackBar(snackBar);&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gzn_dart_textformfield" value="TextFormField(&#10;  decoration: const InputDecoration(hintText: &quot;Hint&quot;),&#10;  validator: (value) =&gt; null,&#10;  onChanged: (value) =&gt; null,&#10;);" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_blocclass_full_form_v1_essb" value="import 'package:flutter_bloc/flutter_bloc.dart';&#10;&#10;//https://github.com/gzeinnumer/flutter_bloc_simple_v1&#10;//gzn_dart_blocclass_full_form_v1_essb&#10;//EVENT-------------------------------------------------------------------------&#10;abstract class $Example$Event{}&#10;&#10;class $Example$InitEvent extends $Example$Event {}&#10;&#10;class $Example$RefreshEvent extends $Example$Event {}&#10;&#10;class $Example$EditTextEvent extends $Example$Event{&#10;  final String value;&#10;&#10;  $Example$EditTextEvent(this.value);&#10;}&#10;&#10;class $Example$SubmitEvent extends $Example$Event{}&#10;&#10;//STATUS------------------------------------------------------------------------&#10;abstract class $Example$Status{&#10;  const $Example$Status();&#10;}&#10;&#10;class $Example$InitStatus extends $Example$Status{&#10;  const $Example$InitStatus();&#10;}&#10;&#10;class $Example$InitDoneStatus extends $Example$Status{&#10;  const $Example$InitDoneStatus();&#10;}&#10;&#10;class $Example$OnLoadingStatus extends $Example$Status{&#10;  final String? _msg;&#10;  String? get msg =&gt; _msg;&#10;  &#10;  const $Example$OnLoadingStatus(this._msg);&#10;}&#10;&#10;class $Example$OnSuccessStatus extends $Example$Status{&#10;  final $Example$Response? _data;&#10;  $Example$Response? get data =&gt; _data;&#10;  &#10;  $Example$OnSuccessStatus(this._data);&#10;}&#10;&#10;class $Example$OnFailedStatus extends $Example$Status{&#10;  final String? _msg;&#10;  String? get msg =&gt; _msg;&#10;  &#10;  $Example$OnFailedStatus(this._msg);&#10;}&#10;&#10;class $Example$OnErrorStatus extends $Example$Status{&#10;  final Error _error;&#10;  Error get error =&gt; _error;&#10;&#10;  $Example$OnErrorStatus(this._error);&#10;}&#10;&#10;class $Example$OnDebugStatus extends $Example$Status{&#10;  final String _msg;&#10;  String get msg =&gt; _msg;&#10;&#10;  $Example$OnDebugStatus(this._msg);&#10;}&#10;&#10;class $Example$NoInternetStatus extends $Example$Status {&#10;  $Example$NoInternetStatus();&#10;}&#10;&#10;class $Example$ExpiredStatus extends $Example$Status {&#10;  final String _msg;&#10;  String get msg =&gt; _msg;&#10;&#10;  $Example$ExpiredStatus(this._msg);&#10;}&#10;&#10;//STATE-------------------------------------------------------------------------&#10;class $Example$State {&#10;  final String editText;&#10;  bool get isValidEditText =&gt; editText.toString().length &gt; 1;&#10;&#10;  final $Example$Status status;&#10;  &#10;  bool isSubmit;&#10;&#10;  $Example$State({&#10;    this.editText = &quot;&quot;,&#10;    this.status = const $Example$InitStatus(),&#10;    this.isSubmit = false,&#10;  });&#10;&#10;  $Example$State copyWith({&#10;    String? editText,&#10;    $Example$Status? status,&#10;    bool? isSubmit,&#10;  }) {&#10;    return $Example$State(&#10;      editText: editText ?? this.editText,&#10;      status: status ?? this.status,&#10;      isSubmit: isSubmit ?? this.isSubmit,&#10;    );&#10;  }&#10;}&#10;&#10;//BLOC--------------------------------------------------------------------------&#10;class $Example$Bloc extends Bloc&lt;$Example$Event, $Example$State&gt;{&#10;  // final ExampleRepo repo;&#10;&#10;  $Example$Bloc() : super($Example$State());&#10;&#10;  @override&#10;  Stream&lt;$Example$State&gt; mapEventToState($Example$Event event) async* {&#10;    if (event is $Example$InitEvent || event is $Example$RefreshEvent) {&#10;      yield state.copyWith(editText: &quot;&quot;, status: const $Example$OnLoadingStatus(&quot;&quot;),);&#10;    } else if (event is $Example$EditTextEvent) {&#10;      yield state.copyWith(editText: event.editText);&#10;    } else if (event is $Example$SubmitEvent) {&#10;      yield state.copyWith(status: const $Example$OnLoadingStatus(&quot;&quot;));&#10;      yield state.copyWith(isSubmit: true);&#10;&#10;      try {&#10;        yield state.copyWith(status: $Example$OnDebugStatus(&quot;Some Debug In String&quot;));&#10;        yield state.copyWith(isSubmit: false);&#10;      } on Error catch (e) {&#10;        // throw e;&#10;        yield state.copyWith(status: $Example$OnErrorStatus(e));&#10;      }&#10;    }&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="Example" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="gzn_dart_blocclass_full_list_v2_esb" value="import 'package:flutter_bloc/flutter_bloc.dart';&#10;&#10;//https://github.com/gzeinnumer/flutter_d14_bloc_and_cubit_v3&#10;//gzn_dart_blocclass_full_list_v2_esb&#10;//EVENT-------------------------------------------------------------------------&#10;abstract class $Post$Event{}&#10;&#10;class $Post$InitEvent extends $Post$Event{}&#10;&#10;class $Post$RefreshEvent extends $Post$Event{}&#10;&#10;//STATE-------------------------------------------------------------------------&#10;abstract class $Post$State{}&#10;&#10;class $Post$OnLoadingState extends $Post$State{&#10;  $Post$OnLoadingState();&#10;}&#10;&#10;class $Post$OnSuccessState extends $Post$State{&#10;  final List&lt;$Model$&gt; list;&#10;&#10;  $Post$OnSuccessState(this.list);&#10;}&#10;&#10;class $Post$OnFailedState extends $Post$State{&#10;  final String? msg;&#10;&#10;  $Post$OnFailedState(this.msg);&#10;}&#10;&#10;class $Post$OnErrorState extends $Post$State{&#10;  final Error exception;&#10;&#10;  $Post$OnErrorState(this.exception);&#10;}&#10;&#10;//BLOC--------------------------------------------------------------------------&#10;class $Post$Bloc extends Bloc&lt;$Post$Event, $Post$State&gt;{&#10;  // final ExampleRepo repo;&#10;&#10;  $Post$Bloc() : super($Post$OnLoadingState());&#10;&#10;  @override&#10;  Stream&lt;$Post$State&gt; mapEventToState($Post$Event event) async* {&#10;    if(event is $Post$InitEvent || event is $Post$RefreshEvent){&#10;      yield $Post$OnLoadingState();&#10;      try{&#10;        // final res = await repo.get$Post$s();&#10;        final res = &lt;$Model$&gt;[];&#10;        yield $Post$OnSuccessState(res);&#10;      } on Error catch(e){&#10;        yield $Post$OnErrorState(e);&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="Post" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Model" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="gzn_dart_blocclass_full_list_v1_essb" value="import 'package:flutter_bloc/flutter_bloc.dart';&#10;&#10;//https://github.com/gzeinnumer/flutter_d14_bloc_and_cubit_v2&#10;//gzn_dart_blocclass_full_list_v1_essb&#10;//EVENT-------------------------------------------------------------------------&#10;abstract class $Post$Event{}&#10;&#10;class $Post$InitEvent extends $Post$Event {}&#10;&#10;class $Post$RefreshEvent extends $Post$Event {}&#10;&#10;//STATUS------------------------------------------------------------------------&#10;abstract class $Post$Status{&#10;  const $Post$Status();&#10;}&#10;&#10;class $Post$OnLoadingStatus extends $Post$Status{&#10;  const $Post$OnLoadingStatus();&#10;}&#10;&#10;class $Post$OnSuccessStatus extends $Post$Status{&#10;  final String? msg;&#10;  &#10;  $Post$OnSuccessStatus(this.msg);&#10;}&#10;&#10;class $Post$OnFailedStatus extends $Post$Status{&#10;  final String? msg;&#10;&#10;  $Post$OnFailedStatus(this.msg);&#10;}&#10;&#10;class $Post$OnErrorStatus extends $Post$Status{&#10;  final Error error;&#10;&#10;  $Post$OnErrorStatus(this.error);&#10;}&#10;&#10;//STATE-------------------------------------------------------------------------&#10;class $Post$State {&#10;  final List&lt;$Model$&gt; list;&#10;  final $Post$Status status;&#10;&#10;  const $Post$State({&#10;    this.list = const &lt;$Model$&gt;[],&#10;    this.status = const $Post$OnLoadingStatus(),&#10;  });&#10;&#10;  $Post$State copyWith({&#10;    List&lt;$Model$&gt;? list,&#10;    $Post$Status? status,&#10;  }) {&#10;    return $Post$State(&#10;      list: list ?? this.list,&#10;      status: status ?? this.status,&#10;    );&#10;  }&#10;}&#10;&#10;//BLOC--------------------------------------------------------------------------&#10;class $Post$Bloc extends Bloc&lt;$Post$Event, $Post$State&gt; {&#10;  // final ExampleRepo repo;&#10;&#10;  $Post$Bloc() : super(const $Post$State());&#10;&#10;  @override&#10;  Stream&lt;$Post$State&gt; mapEventToState($Post$Event event) async* {&#10;    if (event is $Post$InitEvent || event is $Post$RefreshEvent) {&#10;      yield state.copyWith(status: const $Post$OnLoadingStatus());&#10;      try {&#10;        // final res = await repo.get$Post$s();&#10;        final res = &lt;$Model$&gt;[];&#10;        yield state.copyWith(status: $Post$OnSuccessStatus(res));&#10;      } on Error catch (e) {&#10;        yield state.copyWith(status: $Post$OnErrorStatus(e));&#10;      }&#10;    }&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="Post" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Model" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="gzn_dart_cubitprovider" value="BlocProvider&lt;$name$Cubit&gt;(&#10;    create: (context) =&gt; $name$Cubit(), &#10;    child: Container(),&#10;)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_cubit_navigator_material" value="const MaterialPage(child: $title$View()),&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="title" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_cubitemitshow" value="void show$page$View() =&gt; emit(Page$page$State());" description="" toReformat="false" toShortenFQNames="true">
    <variable name="page" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gzn_dart_future_fun" value="Future&lt;String&gt; $funName$(String str) async {&#10;  await Future.delayed(const Duration(seconds: 1));&#10;  return str;&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="funName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gzn_dart_scaffold" value="return Scaffold(&#10;  appBar: AppBar(&#10;    title: const Text(''),&#10;  ),&#10;  body: Container(),&#10;);" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_navigator_push" value="Navigator.push(context, MaterialPageRoute(builder: (context)=&gt; $View$()));" description="" toReformat="false" toShortenFQNames="true">
    <variable name="View" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_navigator_pop" value="Navigator.pop(context);" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_TAG" value="static const String TAG = &quot;$className$&quot;;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="className" expression="dartClassName()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gzn_dart_navigator_pop_v2" value="Navigator.pop(context);" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_navigator_push_v2" value="Navigator.pushNamed(context, $VIEW$.TAG);" description="" toReformat="false" toShortenFQNames="true">
    <variable name="VIEW" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_navigator_class_app_router" value="import 'package:flutter/material.dart';&#10;&#10;class AppRouter {&#10;  static Route&lt;dynamic&gt; generateRoute(RouteSettings routeSettings) {&#10;    switch (routeSettings.name) {&#10;      case SplashScreenView.TAG:&#10;        return MaterialPageRoute(builder: (_) =&gt; const SplashScreenView());&#10;      default:&#10;        return MaterialPageRoute(builder: (_) =&gt; const SplashScreenView());&#10;    }&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="gzn_dart_navigator_app" value="return const MaterialApp(&#10;  debugShowCheckedModeBanner: false,&#10;  onGenerateRoute: AppRouter.generateRoute,&#10;  initialRoute: SplashScreenView.TAG,&#10;);" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_view_splashscreen" value="import 'dart:async';&#10;&#10;import 'package:flutter/material.dart';&#10;import 'package:flutter_navigator_simple_v4/ui/first_view.dart';&#10;&#10;class SplashScreenView extends StatelessWidget {&#10;  static const String TAG = &quot;SplashScreenView&quot;;&#10;&#10;  const SplashScreenView({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: const Text(&quot;SplashScreen&quot;),&#10;      ),&#10;      body: Builder(&#10;          builder: (context) {&#10;            startSplashScrean(context);&#10;            return const Center(&#10;              child: CircularProgressIndicator(),&#10;            );&#10;          },&#10;      ),&#10;    );&#10;  }&#10;&#10;  startSplashScrean(BuildContext context) async{&#10;    var duration = const Duration(seconds: 3);&#10;    return Timer(duration, () {&#10;      Navigator.pushReplacementNamed(context, FirstView.TAG);&#10;    });&#10;  }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="gzn_dart_route_navigator_replace" value="Navigator.pushReplacementNamed(context, $View$View.TAG);" description="" toReformat="false" toShortenFQNames="true">
    <variable name="View" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_route_navigator" value="Navigator.pushNamed(context, $View$View.TAG);" description="" toReformat="false" toShortenFQNames="true">
    <variable name="View" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_route_navigator_pop" value="Navigator.pop(context);" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_var_static" value="static const String KEY_$KEY$ = &quot;$KEY$&quot;;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="KEY" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gzn_dart_route_navigator_case" value="case $VIEW$View.TAG:&#10;    return MaterialPageRoute(builder: (_) =&gt; const $VIEW$View());" description="" toReformat="false" toShortenFQNames="true">
    <variable name="VIEW" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_session_key" value="PreferencesService.KEY_" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_session_var" value="final session = PreferencesService();" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="gzn_dart_session_setvalue" value="session.setSession(PreferencesService.KEY_$KEY$, $VALUE$.toString());" description="" toReformat="false" toShortenFQNames="true">
    <variable name="KEY" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_repomulti_item" value="RepositoryProvider(create: (context) =&gt; $Name$Repo())," description="" toReformat="false" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_loading" value="return const Center(child: CircularProgressIndicator());" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_widget_refresh" value="RefreshIndicator(&#10;    onRefresh: () async {},&#10;    child: Container(),&#10;);" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_session_getvalue" value="session.getSession(PreferencesService.KEY_$NAME$)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_L3_blocbuilder_L3_list_state" value="final status = state.status;&#10;//if (status is $Examples$OnLoadingStatus) {&#10;//  return const LoadingV1();&#10;//} else if (status is $Examples$OnErrorStatus) {&#10;//  return TextV2('Error Accoured: ${status.error.toString()}');&#10;//} else if (status is $Examples$OnFailedStatus) {&#10;//  return TextV2('Error Accoured: ${status.msg.toString()}');&#10;//} else if (status is $Examples$OnSuccessStatus) {&#10;//  return RefreshIndicator(&#10;//    onRefresh: () async {    &#10;//    },&#10;//    child: Container(),&#10;//  );&#10;//} else {&#10;//  return Container();&#10;//}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="Examples" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_rm_preview_v4" value="|&lt;img src=&quot;/preview/preview1.png&quot; width=&quot;300&quot;/&gt;|&#10;|--|" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="false" />
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="OTHER" value="true" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="c" value="false" />
      <option name="cpp" value="false" />
      <option name="objc" value="false" />
    </context>
  </template>
  <template name="gzn_rm_location_dart" value="[.dart](https://github.com/gzeinnumer/flutter_galery/blob/master/lib/.dart)" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="false" />
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="OTHER" value="true" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
      <option name="c" value="false" />
      <option name="cpp" value="false" />
      <option name="objc" value="false" />
    </context>
  </template>
  <template name="gzn_dart_blocclass_full_detail_v1_essb" value="//https://github.com/gzeinnumer/flutter_bloc_simple_v1&#10;//gzn_dart_blocclass_full_form_v1_essb&#10;//EVENT-------------------------------------------------------------------------&#10;abstract class $ExamplesEdit$Event {&#10;  final String id;&#10;&#10;  $ExamplesEdit$Event(this.id);&#10;}&#10;&#10;class $ExamplesEdit$InitDataEvent extends $ExamplesEdit$Event {&#10;  final String id;&#10;&#10;  $ExamplesEdit$InitDataEvent(this.id) : super(id);&#10;}&#10;&#10;class $ExamplesEdit$RefreshEvent extends $ExamplesEdit$Event {&#10;  final String id;&#10;&#10;  $ExamplesEdit$RefreshEvent(this.id) : super(id);&#10;}&#10;&#10;class $ExamplesEdit$SubmitEvent extends $ExamplesEdit$Event {&#10;  final String id;&#10;&#10;  $ExamplesEdit$SubmitEvent(this.id) : super(id);&#10;}&#10;&#10;//STATUS------------------------------------------------------------------------&#10;abstract class $ExamplesEdit$Status {&#10;  const $ExamplesEdit$Status();&#10;}&#10;&#10;class $ExamplesEdit$InitStatus extends $ExamplesEdit$Status {&#10;  const $ExamplesEdit$InitStatus();&#10;}&#10;&#10;class $ExamplesEdit$OnLoadingStatus extends $ExamplesEdit$Status {&#10;  const $ExamplesEdit$OnLoadingStatus();&#10;}&#10;&#10;class $ExamplesEdit$OnSuccessStatus extends $ExamplesEdit$Status {&#10;  final String? msg;&#10;  final $Molde$? data;&#10;&#10;  $ExamplesEdit$OnSuccessStatus({this.msg, this.data});&#10;}&#10;&#10;class $ExamplesEdit$OnSuccessEditStatus extends $ExamplesEdit$Status {&#10;  $ExamplesEdit$OnSuccessEditStatus();&#10;}&#10;&#10;class $ExamplesEdit$OnFailedStatus extends $ExamplesEdit$Status {&#10;  final String? msg;&#10;&#10;  $ExamplesEdit$OnFailedStatus(this.msg);&#10;}&#10;&#10;class $ExamplesEdit$OnErrorStatus extends $ExamplesEdit$Status {&#10;  final Error error;&#10;&#10;  $ExamplesEdit$OnErrorStatus(this.error);&#10;}&#10;&#10;//STATE-------------------------------------------------------------------------&#10;class $ExamplesEdit$State {&#10;  final String value;&#10;  final $ExamplesEdit$Body? editBody;&#10;&#10;  bool get isValidValue =&gt; value.toString().length &gt; 1;&#10;&#10;  final $ExamplesEdit$Status status;&#10;&#10;  $ExamplesEdit$State({&#10;    this.value = &quot;&quot;,&#10;    this.editBody,&#10;    this.status = const $ExamplesEdit$InitStatus(),&#10;  });&#10;&#10;  $ExamplesEdit$State copyWith({&#10;    String? value,&#10;    $ExamplesEdit$Body? editBody,&#10;    $ExamplesEdit$Status? status,&#10;  }) {&#10;    return $ExamplesEdit$State(&#10;      value: value ?? this.value,&#10;      editBody: editBody ?? this.editBody,&#10;      status: status ?? this.status,&#10;    );&#10;  }&#10;}&#10;&#10;//BLOC--------------------------------------------------------------------------&#10;class $ExamplesEdit$Bloc extends Bloc&lt;$ExamplesEdit$Event, $ExamplesEdit$State&gt; {&#10;  //final ExamplesRepo examplesRepo;&#10;&#10;  $ExamplesEdit$Bloc({&#10;    //required this.examplesRepo,&#10;  }) : super(ExamplesEditState());&#10;&#10;  @override&#10;  Stream&lt;$ExamplesEdit$State&gt; mapEventToState$ExamplesEdit$Event event) async* {&#10;    if (event is $ExamplesEdit$InitDataEvent || event is $ExamplesEdit$RefreshEvent) {&#10;      yield state.copyWith(value: event.id);&#10;      yield state.copyWith(status: const $ExamplesEdit$OnLoadingStatus());&#10;      try {&#10;        //final res = await examplesRepo.findExamples(event.id);&#10;        //if (res.status.toString() == &quot;1&quot;) {&#10;        //  yield state.copyWith(&#10;        //    status: ExamplesEditOnSuccessStatus(&#10;        //      msg: res.message.toString(),&#10;        //      data: res.data,&#10;        //    ),&#10;        //  );&#10;        //} else {&#10;        //  yield state.copyWith(status: $ExamplesEdit$OnFailedStatus(res.message.toString()));&#10;        //}&#10;      } on Error catch (e) {&#10;        yield state.copyWith(status: $ExamplesEdit$OnErrorStatus(e));&#10;      }&#10;    } else if (event is $ExamplesEdit$SubmitEvent) {&#10;      yield state.copyWith(value: event.id);&#10;      yield state.copyWith(status: const $ExamplesEdit$OnLoadingStatus());&#10;      try {&#10;        //final body = $ExamplesEdit$Body(&#10;        //  id: event.id.toString(),&#10;        //);&#10;        //final res = await examplesRepo.editExamples(body);&#10;        //if (res.status.toString() == &quot;1&quot;) {&#10;        //  yield state.copyWith(&#10;        //    status: $ExamplesEdit$OnSuccessEditStatus(&#10;        //    ),&#10;        //  );&#10;        } else {&#10;          yield state.copyWith(status: $ExamplesEdit$OnFailedStatus(res.message.toString()));&#10;        }&#10;      } on Error catch (e) {&#10;        yield state.copyWith(status: $ExamplesEdit$OnErrorStatus(e));&#10;      }&#10;    }&#10;  }&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="ExamplesEdit" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Molde" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="gzn_dart_media_query" value="double width = MediaQuery.of(context).size.width;&#10;double height = MediaQuery.of(context).size.height;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_L0_blocmulti_provider_L0" value="MultiRepositoryProvider(&#10;  providers: [&#10;    //L0&#10;    RepositoryProvider(create: (context) =&gt; $name$Repo()),&#10;  ],&#10;  child: MultiBlocProvider(&#10;    providers: [&#10;      //L1&#10;      BlocProvider&lt;$name$Bloc&gt;(&#10;        create: (context) =&gt; $name$Bloc(&#10;          repo: context.read&lt;$name$Repo&gt;(),&#10;        )..add($name$InitEvent()),&#10;      )&#10;    ],&#10;    child: Container(),&#10;  ),&#10;)," description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_stateless" value="import 'package:flutter/material.dart';&#10;&#10;class $Izin$View extends StatelessWidget {&#10;  static const String TAG = &quot;$Izin$View&quot;;&#10;&#10;  const $Izin$View({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: const Text(&quot;$Izin$&quot;),&#10;      ),&#10;      body: _body(context),&#10;    );&#10;  }&#10;  &#10;  Widget _body(BuildContext context) {&#10;    double width = MediaQuery.of(context).size.width;&#10;    double height = MediaQuery.of(context).size.height;&#10;    return SingleChildScrollView(&#10;      child: Container(&#10;        height: height,&#10;        width: width,&#10;        child: Column(&#10;          mainAxisAlignment: MainAxisAlignment.center,&#10;          crossAxisAlignment: CrossAxisAlignment.center,&#10;          children: [&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="Izin" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="gzn_dart_container_BoxDecoration" value="decoration: const BoxDecoration(&#10;  color: Colors.white,&#10;  borderRadius: BorderRadius.all(Radius.circular(16.0)),&#10;)," description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="gzn_dart_repo" value="class $name$Repo{&#10;  final network = Network();&#10;&#10;  //gzn_dart_future_fun&#10;  //Future&lt;BaseResponseMsg&gt; updateNotification(NotificationBody body) async {&#10;  //  final res = await network.updateNotification(body);&#10;  //  return res;&#10;  //}&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="gzn_dart_bloc_v2_class" value="import 'package:flutter_bloc/flutter_bloc.dart';&#10;&#10;//https://github.com/gzeinnumer/flutter_bloc_simple_v1&#10;//gzn_dart_blocclass_full_form_v1_essb&#10;//EVENT-------------------------------------------------------------------------&#10;abstract class $name$Event {}&#10;&#10;class $name$EventInit extends $name$Event {}&#10;&#10;class $name$EventEd extends $name$Event {&#10;  final String value;&#10;&#10;  $name$EventEd(this.value);&#10;}&#10;&#10;class $name$EventSubmit extends $name$Event {}&#10;&#10;//STATUS------------------------------------------------------------------------&#10;abstract class $name$Status {&#10;  const $name$Status();&#10;}&#10;&#10;class $name$StatusInit extends $name$Status {&#10;  const $name$StatusInit();&#10;}&#10;&#10;class $name$StatusInitDone extends $name$Status {&#10;  const $name$StatusInitDone();&#10;}&#10;&#10;class $name$StatusFillForm extends $name$Status {&#10;  const $name$StatusFillForm();&#10;}&#10;&#10;class $name$StatusLoading extends $name$Status {&#10;  final String? _msg;&#10;&#10;  String? get msg =&gt; _msg;&#10;&#10;  const $name$StatusLoading(this._msg);&#10;}&#10;&#10;class $name$StatusSuccess extends $name$Status {&#10;  final String? _data;&#10;&#10;  String? get data =&gt; _data;&#10;&#10;  $name$StatusSuccess(this._data);&#10;}&#10;&#10;class $name$StatusFailed extends $name$Status {&#10;  final String? _msg;&#10;  final int? _type;&#10;  //type 1 = info-&gt;stay&#10;  //type 2 = info-&gt;close&#10;  //type 3 = confirm&#10;  //type 4 = snackbar&#10;&#10;  String? get msg =&gt; _msg;&#10;  int? get type =&gt; _type;&#10;&#10;  $name$StatusFailed(this._msg, this._type);&#10;}&#10;&#10;//STATE-------------------------------------------------------------------------&#10;class $name$State {&#10;  final String ed;&#10;  String? get isValidEd =&gt; ed.toString().length &gt; 1  ? null : &quot;required&quot;;&#10;&#10;  final $name$Status status;&#10;&#10;  bool isSubmit;&#10;&#10;  $name$State({&#10;    this.ed = &quot;&quot;,&#10;    this.status = const $name$StatusInit(),&#10;    this.isSubmit = false,&#10;  });&#10;&#10;  $name$State copyWith({&#10;    String? ed,&#10;    $name$Status? status,&#10;    bool? isSubmit,&#10;  }) {&#10;    return $name$State(&#10;      ed: ed ?? this.ed,&#10;      status: status ?? this.status,&#10;      isSubmit: isSubmit ?? this.isSubmit,&#10;    );&#10;  }&#10;}&#10;&#10;//BLOC--------------------------------------------------------------------------&#10;class $name$Bloc extends Bloc&lt;$name$Event, $name$State&gt; {&#10;  final $name$Repo repo;&#10;&#10;  $name$Bloc({&#10;    required this.repo,&#10;  }) : super($name$State());&#10;&#10;  @override&#10;  Stream&lt;$name$State&gt; mapEventToState($name$Event event) async* {&#10;    if (event is $name$EventInit) {&#10;      yield state.copyWith(status: const $name$StatusLoading(&quot;&quot;));&#10;      yield state.copyWith(status: const $name$StatusInitDone());&#10;    } else if (event is $name$EventEd) {&#10;      yield state.copyWith(ed: event.value);&#10;    } else if (event is $name$EventSubmit) {&#10;      yield state.copyWith(status: const $name$StatusLoading(&quot;&quot;));&#10;&#10;      try {&#10;        yield state.copyWith(status: $name$StatusFailed(&quot;DEBUG_Some Debug In String&quot;, 1));&#10;        yield state.copyWith(isSubmit: false);&#10;      } on Error catch (e) {&#10;        yield state.copyWith(status: $name$StatusFailed(e.toString(), 1));&#10;      }&#10;    }&#10;  }&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="gzn_dart_bloc_v2_L0_MultiRepositoryProvider" value="MultiRepositoryProvider(&#10;  providers: [&#10;    //L0&#10;    RepositoryProvider(create: (context) =&gt; $name$Repo()),&#10;  ],&#10;  child: MultiBlocProvider(&#10;    providers: [&#10;      //L1&#10;      BlocProvider&lt;$name$Bloc&gt;(&#10;        create: (context) =&gt; $name$Bloc(&#10;          repo: context.read&lt;$name$Repo&gt;(),&#10;        )..add($name$EventInit()),&#10;      )&#10;    ],&#10;    child: Container(),&#10;  ),&#10;)," description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_bloc_v2_L2_BlocListener" value="//L2&#10;return BlocListener&lt;$name$Bloc, $name$State&gt;(&#10;  listener: (context, state) {&#10;    String TITLE = &quot;&quot;;&#10;    String MSG = &quot;&quot;;&#10;    VoidCallback ACTION = () {};&#10;    int TYPE = 0; &#10;    //type 1 = info-&gt;stay&#10;    //type 2 = info-&gt;close&#10;    //type 3 = confirm&#10;    //type 4 = snackbar&#10;    final status = state.status;&#10;    if (status is $name$StatusInit) {&#10;      if (state.isSubmit) {&#10;        final c = state.status as $name$StatusInit;&#10;        TITLE = &quot;&quot;;&#10;        MSG = &quot;&quot;;&#10;        ACTION = () {};&#10;        TYPE = 1;&#10;      }&#10;    } else if (status is $name$StatusInitDone) {&#10;      if (state.isSubmit) {&#10;        final c = state.status as $name$StatusInitDone;&#10;        //_Controller.text = &quot;&quot;;&#10;      }&#10;    } else if (status is $name$StatusLoading) {&#10;      if (state.isSubmit) {&#10;        final c = state.status as $name$StatusLoading;&#10;        TITLE = &quot;&quot;;&#10;        MSG = &quot;&quot;;&#10;        ACTION = () {};&#10;        TYPE = 1;&#10;      }&#10;    } else if (status is $name$StatusFailed) {&#10;      if (state.isSubmit) {&#10;        final c = state.status as $name$StatusFailed;&#10;        TITLE = &quot;&quot;;&#10;        MSG = &quot;&quot;;&#10;        ACTION = () {};&#10;        TYPE = 1;&#10;      }&#10;    } else if (status is $name$StatusSuccess) {&#10;      if (state.isSubmit) {&#10;        final c = state.status as $name$StatusSuccess;&#10;        TITLE = &quot;&quot;;&#10;        MSG = &quot;&quot;;&#10;        ACTION = () {};&#10;        TYPE = 1;&#10;      }&#10;    } else {&#10;      TITLE = &quot;&quot;;&#10;      MSG = &quot;&quot;;&#10;      ACTION = () {};&#10;      TYPE = 0;&#10;    }&#10;&#10;    if (TITLE.isNotEmpty &amp;&amp; MSG.isNotEmpty) {&#10;      if(TYPE == 1){&#10;      &#10;      } else if(TYPE == 2){&#10;      &#10;      } else if(TYPE == 3){&#10;      &#10;      } else if(TYPE == 4){&#10;      &#10;      } else {&#10;      &#10;      }&#10;    }&#10;  },&#10;  child: Container(),&#10;);" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_dart_bloc_v2_L3_BlocBuilder" value="return BlocBuilder&lt;$name$Bloc, $name$State&gt;(&#10;  builder: (context, state) {&#10;    //L3&#10;    final status = state.status;&#10;    if (status is $name$StatusLoading) {&#10;      final c = state.status as $name$StatusLoading;&#10;      return const LoadingV1();&#10;    } else if (status is $name$StatusFailed) {&#10;      return Center(&#10;        child: ButtonV1(&#10;          label: 'Try Again',&#10;          onPressed: () {&#10;            context.read&lt;$name$Bloc&gt;().add($name$EventInit());&#10;          },&#10;        ),&#10;      );&#10;    } else if (status is $name$StatusInitDone) {&#10;      final c = state.status as $name$StatusInitDone;&#10;&#10;      return _section(context, state);&#10;    } else {&#10;      return const Center(&#10;        child: Text(&quot;Something When Wrong&quot;),&#10;      );&#10;    }&#10;  },&#10;);" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="gzn_fname" value="$METHOD_NAME$" description="" toReformat="false" toShortenFQNames="true">
    <variable name="METHOD_NAME" expression="methodName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="gzn_click_delay" value="binding.$VIEW$.setOnClickListener(new DelayButton(binding.$VIEW$, view -&gt; {&#10;    &#10;}));" description="set on click" toReformat="false" toShortenFQNames="true">
    <variable name="VIEW" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="gzn_newInstance" value="public static $CLASS_NAME$ newInstance() {&#10;    return new $CLASS_NAME$();&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="gzn_show_dialog" value="FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();&#10;Fragment previous = getSupportFragmentManager().findFragmentByTag($CustomMyLibDialog$.TAG);&#10;if(previous != null){&#10;    transaction.remove(previous);&#10;}&#10;$CustomMyLibDialog$ dialog = $CustomMyLibDialog$.newInstance();&#10;dialog.show(transaction, $CustomMyLibDialog$.TAG);" description="" toReformat="false" toShortenFQNames="true">
    <variable name="CustomMyLibDialog" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="gzn_init_date" value="private void openDatePeriode() {&#10;    BasePopUp.datePickerMulti(requireActivity().getSupportFragmentManager(), requireActivity())&#10;            .onOkPressedCallBack((firstDate, secondDate) -&gt; {&#10;                Log.d(&quot;TAG&quot;, firstDate + &quot; sd &quot; + secondDate);&#10;            })&#10;            .build()&#10;            .show();&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>